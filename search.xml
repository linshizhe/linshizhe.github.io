<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[在Ubuntu Server下搭建LAMP环境]]></title>
    <url>%2F2017%2F12%2F15%2F%E5%9C%A8Ubuntu%20Server%E4%B8%8B%E6%90%AD%E5%BB%BALAMP%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[一、前言1.1LAMP详解经过多年是Web技术发展，在业内被广泛使用的一种Web服务器解决方案之一（LNMP也非常受欢迎），由一些独立的系统或软件组合而成。 软件组件： Linux: Linux 是免费开源软件，这意味着源代码可用的操作系统。 Apache: Apache 是使用中最受欢迎的一个开放源码的WEB服务器软件。 MySQL: MySQL 是多线程、多用户的SQL数据库管理系统。 PHP: PHP 是一种编程语言最初设计生产动态网站。PHP 是主要用于服务器端的应用程序软件。Perl 和 Python 类似。 1.2LAMP工作原理 二、实验环境：发行版本: Ubuntu 12.04.5 LTS 内核版本：3.13.0-32-generic ip:192.168.198.5 三、Ubuntu server 管理员权限解读为了安全Ubuntu 官方不推荐使用root账户远程登陆，安装系统的时候会强制要设置一个不同于root的普通用户。 操作ubuntu的预备知识： 1）命令行 dgnet@dgnet-ip:~$ dgnet表示用户名 @dgnet-ip 表示@主机名 ~ 表示当前目录 $ 表示用户类型标记 -$表示普通用户，#表示超级管理员 2）通过passwd命令修改账户密码 2.1）先查看当前用户 dgnet@dgnet-ip:~$ pwd /home/dgnet 2.2）让当前用户获得临时超级管理员权限 dgnet@dgnet-ip:~$ sudo passwd root [sudo] password for dgnet: #输入用户dgnet的秘密 Enter new UNIX password: #给root用户设置新密码 Retype new UNIX password: #确认root密码 passwd: password updated successfully 注意事项： 1）普通账户没有管理员权限 2）默认情况下ROOT账户无法登陆 3）su (switch user)切换到超级管理员 4）sudo (switch user and do) 以超级管理员身份执行 5）sudo弥补了su产生的多账户安全问题 使用su命令所有管理员都必须知道root账户的密码，sudo使得普通管理员使用自己的秘密也可以获得超级管理员权限。 四、安装软件1）先安装apt-get软件安装工具 gnet@dgnet-ip:~$ sudo apt-get update 2) 使用apt-get软件安装工具安装apache2 dgnet@dgnet-ip:~$ sudo apt-get install apache2 检查一下apache的版本 dgnet@dgnet-ip:~$ apache2 -v Server version: Apache/2.2.22 (Ubuntu) Server built: Jul 15 2016 15:32:45 打开浏览器输入ip地址检查apache是否正常工作 3)使用apt-get软件安装工具安装php5 dgnet@dgnet-ip:~$ sudo apt-get install php5 检查一下php的版本 dgnet@dgnet-ip:~$ php5 -v PHP 5.3.10-1ubuntu3.26 with Suhosin-Patch (cli) (built: Feb 13 2017 20:37:53) Copyright (c) 1997-2012 The PHP Group Zend Engine v2.3.0, Copyright (c) 1998-2012 Zend Technologies 检查一下apache是否加载了libphp5.so这个模块 dgnet@dgnet-ip:~$ cat /etc/apache2/mods-enabled/php5.load LoadModule php5_module /usr/lib/apache2/modules/libphp5.so 4)使用apt-get软件安装工具安装mysql-server dgnet@dgnet-ip:~$ sudo apt-get install mysql-server 先给mysql-server设置密码（baidu.com@ip） 接着安装一下mysql的扩展 dgnet@dgnet-ip:~$ sudo apt-get install php5-mysql 检查一下mysql.so模块是否正常加载 dgnet@dgnet-ip:~$ cat /etc/php5/conf.d/mysql.ini ; configuration for php MySQL module extension=mysql.so 确保php5与mysql能正常工作，重启一下mysql dgnet@dgnet-ip:~$ sudo service mysql restart 重启apache dgnet@dgnet-ip:~$ sudo service mysql restart 到目前lamp软件已经安装完成，分开各个软件安装是为了更好了理解各个软件之间的关系，我们清楚了解了lamp之后可以使用一条命令就把lamp安装好。 dgnet@dgnet-ip:~$ sudo apt-get install -y apache2 php5 mysql-server php5-mysql 或者 dgnet@dgnet-ip:~$ sudo tasksel install -y lamp-servver 五、其他设置1）创建phpinfo服务器探针 dgnet@dgnet-ip:~$ cd /var/www dgnet@dgnet-ip:/var/www$ sudo vim info.php [sudo] password for dgnet: info.php代码 &lt;?phpecho mysql_connect(&apos;localhost&apos;,&apos;root&apos;,&apos;baidu.com@ip&apos;) ? &apos;Mom, dont worry about my database, either&apos; : &apos;Last year I bought a watch&apos;; phpinfo(); 在浏览器中打开info.php查看,php与数据库是否正常 2)PHP添加常用扩展 dgnet@dgnet-ip:~$ sudo apt-get install php5-gd curl libcurl3-dev php5-curl 安装完成重启apache dgnet@dgnet-ip:~$ sudo service apache2 restart 浏览器中查看扩展是否工作正常 六、LAMP环境配置文件1）Ubuntu系统配置文件目录：/etc 2)各组件配置文件位置 -Apache /etc/apache2 -MYSQL /etc/mysql -PHP /etc/php5 3)查看apache dgnet@dgnet-ip:~$ cd /etc/apache2 dgnet@dgnet-ip:/etc/apache2$ ll apache工作过程： apache核心配置： -mods-* Apache模块 -sites-* 虚拟主机 关键词 available 可以使用的；enabled 已启用的 4)MYSQL核心配置文件 my.cnf 5)php核心配置文件 php.ini 6)配置apache虚拟主机 7)手动模拟DNS，修改本地hosts文件 浏览器查看上面三个域名，都是指向ip 192.168.198.5 8)为（oa bbs video）服务器创建目录 dgnet@dgnet-ip:~$ cd /var dgnet@dgnet-ip:/var$ sudo mkdir -p /wwwroot/{video,bbs,oa} dgnet@dgnet-ip:/var$ cd /wwwroot/ dgnet@dgnet-ip:/wwwroot$ ll dgnet@dgnet-ip:/wwwroot$ cd video/ dgnet@dgnet-ip:/wwwroot/video$ sudo vim index.html dgnet@dgnet-ip:/wwwroot/video$ cd ../bbs dgnet@dgnet-ip:/wwwroot/bbs$ sudo vim index.html dgnet@dgnet-ip:/wwwroot$ cd oa dgnet@dgnet-ip:/wwwroot/oa$ sudo vim index.html 9）开始配置虚拟主机 dgnet@dgnet-ip:/wwwroot/oa$ cd /etc/apache2/sites-available/ dgnet@dgnet-ip:/etc/apache2/sites-available$ ll ls: 初始化月份字符串出错 总用量 20 drwxr-xr-x 2 root root 4096 7Ղ 17 15:00 ./ drwxr-xr-x 7 root root 4096 7Ղ 17 15:00 ../ -rw-r--r-- 1 root root 950 2Ղ 7 2012 default -rw-r--r-- 1 root root 7469 2Ղ 7 2012 default-ssl 复制defult文件作为video bbs oa 三个虚拟主机的蓝本 dgnet@dgnet-ip:/etc/apache2/sites-available$ sudo cp default video dgnet@dgnet-ip:/etc/apache2/sites-available$ sudo cp default bbs dgnet@dgnet-ip:/etc/apache2/sites-available$ sudo cp default oa 编辑video dgnet@dgnet-ip:/etc/apache2/sites-available$ sudo vim video 虚拟配置如下： &lt;VirtualHost *:80&gt; ServerName video.lsz.com ServerAdmin webmaster@localhost DocumentRoot /wwwroot/video &lt;Directory /&gt; Options FollowSymLinks AllowOverride None &lt;/Directory&gt; &lt;Directory /wwwroot/video/&gt; Options Indexes FollowSymLinks MultiViews AllowOverride None Order allow,deny allow from all &lt;/Directory&gt; 编辑bbs: dgnet@dgnet-ip:/etc/apache2/sites-available$ sudo vim bbs 虚拟配置如下： &lt;VirtualHost *:80&gt; ServerName bbs.lsz.com ServerAdmin webmaster@localhost DocumentRoot /wwwroot/bbs &lt;Directory /&gt; Options FollowSymLinks AllowOverride None &lt;/Directory&gt; &lt;Directory /wwwroot/bbs/&gt; Options Indexes FollowSymLinks MultiViews AllowOverride None Order allow,deny allow from all &lt;/Directory&gt; 编辑oa: dgnet@dgnet-ip:/etc/apache2/sites-available$ sudo vim oa 虚拟配置如下： &lt;VirtualHost *:80&gt; ServerName oa.lsz.com ServerAdmin webmaster@localhost DocumentRoot /wwwroot/oa &lt;Directory /&gt; Options FollowSymLinks AllowOverride None &lt;/Directory&gt; &lt;Directory /wwwroot/oa/&gt; Options Indexes FollowSymLinks MultiViews AllowOverride None Order allow,deny allow from all &lt;/Directory&gt; 10)启用虚拟配置文件 dgnet@dgnet-ip:/etc/apache2/sites-available$ cd ../sites-enabled/ dgnet@dgnet-ip:/etc/apache2/sites-enabled$ sudo ln -s ../sites-available/video video dgnet@dgnet-ip:/etc/apache2/sites-enabled$ sudo ln -s ../sites-available/bbs bbs dgnet@dgnet-ip:/etc/apache2/sites-enabled$ sudo ln -s ../sites-available/oa oa dgnet@dgnet-ip:/etc/apache2/sites-enabled$ ll ls: 初始化月份字符串出错 总用量 8 drwxr-xr-x 2 root root 4096 7Ղ 17 18:14 ./ drwxr-xr-x 7 root root 4096 7Ղ 17 15:00 ../ lrwxrwxrwx 1 root root 26 7Ղ 17 15:00 000-default -&gt; ../sites-available/default lrwxrwxrwx 1 root root 22 7Ղ 17 18:14 bbs -&gt; ../sites-available/bbs lrwxrwxrwx 1 root root 21 7Ղ 17 18:14 oa -&gt; ../sites-available/oa lrwxrwxrwx 1 root root 24 7Ղ 17 18:14 video -&gt; ../sites-available/video dgnet@dgnet-ip:/etc/apache2/sites-enabled$ sudo service apache2 restart 浏览器中查看对应的域名： bbs.lsz.com video.lsz.com oa.lsz.com 11）安装数据库管理工具phpmyadmin dgnet@dgnet-ip:~$ sudo apt-get install phpmyadmin dgnet@dgnet-ip:~$ cd /var/www dgnet@dgnet-ip:/var/www$ sudo ln -s /usr/share/phpmyadmin phpmyadmin 浏览器打开 开启MySQL的remote access dgnet@dgnet-ip:/var/www$ sudo vim /etc/mysql/my.cnf 找到bind-address注释 #bind-address = 127.0.0.1 使用phpmyadmin用户密码登陆 (root,baidu.com@ip) 添加一个用户linshizhe 允许公网ip 访问 重启mysql重新加载配置： dgnet@dgnet-ip:/var/www$ sudo service mysql restart 通过Navicat测试远程连接数据库 到这里lamp基本就已经部署完成了！！！]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>LAMP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS6.5下搭建vsftpd服务]]></title>
    <url>%2F2017%2F12%2F15%2F%E6%90%AD%E5%BB%BAvsftpd%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[一、文件传输协议文件传输协议(FTP)是为进行文件共享而设计的因特网标准协议。为了能够在复杂多样的操作设备之间解决文件传输问题，于是便有了统一的FTP文件传输协议（File Transfer Protocol），这是一种能够让使用者在互联网中上传、下载文件的传输协议。FTP文件传输协议默认占用了20、21两个端口号，20端口号用于进行数据传输，21端口号用于接受客户端执行的相关FTP命令与参数，FTP服务端普遍更多的应用于内网中，具有易于搭建、方便管理的特点，并且可以借助FTP客户端工具还可以轻松实现文件的多点下载和断点续传技术，FTP协议的传输拓扑如下图所示 二、实验环境服务端：Centos 6.5 (2.6.32-358.el6.x86_64) ip:192.168.198.141 客户端：Centos 6.5 （2.6.32-431.el6.x86_64） ip：192.168.198.100 selinux =disable [root@vsftpdserver ~]# vi /etc/sysconfig/selinux SELINUX=disabled iptables防火墙管理工具中默认禁止了ftp传输协议的端口号，因此在正式配置vsftpd服务程序前还需要清空一下iptables防火墙的默认策略，并把当前已经被清理的防火墙策略状态保存下来： [root@vsftpdserver ~]# iptables -F [root@vsftpdserver ~]# service iptables save iptables: Saving firewall rules to /etc/sysconfig/iptables:[ OK ] 三、安装软件1）服务端：vsftpd [root@vsftpdserver ~]# yum -y install vsftpd [root@vsftpdserver ~]# rpm -aq|grep vsftpd vsftpd-2.2.2-24.el6.x86_64 2)客户端：ftp [root@ip-ftp_client ~]# yum -y install ftp [root@ip-ftp_client ~]# rpm -aq|grep ftp ftp-0.17-54.el6.x86_64 3）vsftpd服务程序的主配置文件中常用的参数及作用介绍 参数 作用 listen=[YES|NO] 是否以独立运行的方式监听服务。 listen_address=IP地址 设置要监听的IP地址。 listen_port=21 设置FTP服务的监听端口。 download_enable＝[YES|NO] 是否允许下载文件。 userlist_enable=[YES|NO] 是否启用“禁止登陆用户名单”。 userlist_deny=[YES|NO] 是否启用“禁止登陆用户名单”。 max_clients=0 最大客户端连接数，0为不限制。 max_per_ip=0 同一IP地址最大连接数，0为不限制。 anonymous_enable=[YES|NO] 是否允许匿名用户访问。 anon_upload_enable=[YES|NO] 是否允许匿名用户上传文件。 anon_umask=022 匿名用户上传文件的umask值。 anon_root=/var/ftp 匿名用户的FTP根目录。 anon_mkdir_write_enable=[YES|NO] 是否允许匿名用户创建目录。 anon_other_write_enable=[YES|NO] 是否开放匿名用户其他写入权限。 anon_max_rate=0 匿名用户最大传输速率(字节)，0为不限制。 local_enable=[YES|NO] 是否允许本地用户登陆FTP。 local_umask=022 本地用户上传文件的umask值。 local_root=/var/ftp 本地用户的FTP根目录。 chroot_local_user=[YES|NO] 是否将用户权限禁锢在FTP目录，更加的安全。 local_max_rate=0 本地用户最大传输速率(字节)，0为不限制。 四、配置vsftpdvsftpd作为更加安全的FTP文件传输协议的服务程序，可以让用户分别通过匿名开放、本地用户和虚拟用户三种身份验证方式来登陆到FTP服务器上面。 1) 匿名访问模式 [root@vsftpdserver ~]# mv /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf_bak [root@vsftpdserver ~]# grep -v &quot;#&quot; /etc/vsftpd/vsftpd.conf_bak &gt; /etc/vsftpd/vsftpd.conf [root@vsftpdserver ~]# cat /etc/vsftpd/vsftpd.conf anonymous_enable=YES local_enable=YES write_enable=YES local_umask=022 dirmessage_enable=YES xferlog_enable=YES connect_from_port_20=YES xferlog_std_format=YES listen=YES pam_service_name=vsftpd userlist_enable=YES tcp_wrappers=YES 修改vsftpd.conf配置 [root@vsftpdserver ~]# vi /etc/vsftpd/vsftpd.conf anonymous_enable=YES anon_umask=022 anon_upload_enable=YES anon_mkdir_write_enable=YES anon_other_write_enable=YES local_enable=YES write_enable=YES local_umask=022 dirmessage_enable=YES xferlog_enable=YES connect_from_port_20=YES xferlog_std_format=YES listen=YES pam_service_name=vsftpd userlist_enable=YES tcp_wrappers=YES 保存配置后重启服务，并设置服务开机自启动 [root@vsftpdserver ~]# service vsftpd restart Shutting down vsftpd: [FAILED] Starting vsftpd for vsftpd: [ OK ] [root@vsftpdserver ~]# chkconfig vsftpd on 在客户端测试： [root@ip-ftp_client ~]# ftp 192.168.198.141 Connected to 192.168.198.141 (192.168.198.141). 220 (vsFTPd 2.2.2) Name (192.168.198.141:root): anonymous （用户名anonymous） 331 Please specify the password. Password: （此次直接回车） 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; cd到pub目录，创建一个SYS目录 ftp&gt; cd pub 250 Directory successfully changed. ftp&gt; mkdir SYS 550 Create directory operation failed. 我们看到mkdir SYS 提示550 Create directory operation failed.（？？？fuck,什么原因？？，前面我们设置 了anon_mkdir_write_enable=YES)，原来FTP服务的匿名开放模式是默认登陆到了/var/ftp目录中，查看下这个目录的权限后才发现原来只有root管理员用户才有写入权限的，怪不得会提示写入出错呢，只需要把目录的所有者身份改成系统帐户ftp即可，这样就应该可以了~ [root@vsftpdserver ~]# ls -ld /var/ftp/pub drwxr-xr-x. 6 root root 4096 Mar 22 12:14 /var/ftp/pub [root@vsftpdserver ~]# chown -Rf ftp /var/ftp/pub [root@vsftpdserver ~]# ls -ld /var/ftp/pub drwxr-xr-x. 6 ftp root 4096 Mar 22 12:14 /var/ftp/pub 然后再创建几个目录看看行不行 ftp&gt; cd pub 250 Directory successfully changed. ftp&gt; mkdir SYS 257 &quot;/pub/SYS&quot; created ftp&gt; mkdir NET 257 &quot;/pub/NET&quot; created ftp&gt; mkdir CWB 257 &quot;/pub/CWB&quot; created ftp&gt; 回到服务端查看目录： [root@vsftpdserver ~]# cd /var/ftp/pub [root@vsftpdserver pub]# ll total 12 drwxr-xr-x 2 ftp ftp 4096 Jul 19 20:35 CWB drwxr-xr-x 2 ftp ftp 4096 Jul 19 20:35 NET drwxr-xr-x 2 ftp ftp 4096 Jul 19 20:35 SYS 客户端上传文件： ftp&gt; cd /pub/SYS 250 Directory successfully changed. ftp&gt; put sys.text local: sys.text remote: sys.text 227 Entering Passive Mode (192,168,198,141,95,201). 150 Ok to send data. 226 Transfer complete. ftp&gt; cd /pub/NET 250 Directory successfully changed. ftp&gt; put net.text local: net.text remote: net.text 227 Entering Passive Mode (192,168,198,141,73,52). 150 Ok to send data. 226 Transfer complete. ftp&gt; cd /pub/CWB 250 Directory successfully changed. ftp&gt; put cwb.text local: cwb.text remote: cwb.text 227 Entering Passive Mode (192,168,198,141,121,92). 150 Ok to send data. 226 Transfer complete 服务端查看： [root@vsftpdserver pub]# cd NET [root@vsftpdserver NET]# ll total 0 -rw-r--r-- 1 ftp ftp 0 Jul 19 20:46 net.text 客户端测试下载： 现在服务端创建一个iphone.txt的文件 [root@vsftpdserver ~]# cd /var/ftp/pub [root@vsftpdserver pub]# touch iphone.txt [root@vsftpdserver pub]# ll total 12 drwxr-xr-x 2 ftp ftp 4096 Jul 19 20:46 CWB -rw-r--r-- 1 root root 0 Jul 19 20:53 iphone.txt drwxr-xr-x 2 ftp ftp 4096 Jul 19 20:46 NET drwxr-xr-x 2 ftp ftp 4096 Jul 19 20:45 SYS 客户端下载： ftp&gt; get iphone.txt local: iphone.txt remote: iphone.txt 227 Entering Passive Mode (192,168,198,141,213,175). 150 Opening BINARY mode data connection for iphone.txt (0 bytes). 226 Transfer complete. 下载到对应目录 [root@ip-ftp_client iphone]# ll 总用量 0 -rw-r--r-- 1 root root 0 7月 18 16:56 iphone.txt 2）本地用户模式 本地用户模式是通过Linux系统本地的帐号密码信息进行的验证方式，这种模式相比较匿名开放模式来说比较安全，因此推荐既然开启了本地用户模式，就把匿名开放模式给关闭了吧~ a)编辑配置文件vsftpd.conf [root@vsftpdserver ~]# vi /etc/vsftpd/vsftpd.conf anonymous_enable=NO local_enable=YES write_enable=YES local_umask=022 dirmessage_enable=YES xferlog_enable=YES connect_from_port_20=YES xferlog_std_format=YES listen=YES pam_service_name=vsftpd userlist_enable=YES tcp_wrappers=YES b)修改默认端口 默认FTP服务器端口号是21，出于安全目的，有时需修改默认端口号，修改/etc/vsftpd/vsftpd.conf，添加语句(例)：listen_port=4449 [root@vsftpdserver ~]# vi /etc/vsftpd/vsftpd.conf listen_port=4449 c)重启服务，并设置开机自启 [root@vsftpdserver ~]# service vsftpd restart Shutting down vsftpd: [ OK ] Starting vsftpd for vsftpd: [ OK ] d)设置用户组 递归创建新目录 [root@vsftpdserver ~]# mkdir -p /home/SYS 新建组 [root@vsftpdserver ~]# groupadd SYS 新建用户SYS-01、SYS-02、SYS-03并指定家目录和属组 [root@vsftpdserver ~]# useradd -g SYS -d /home/SYS SYS-01 [root@vsftpdserver ~]# useradd -g SYS -d /home/SYS SYS-02 [root@vsftpdserver ~]# useradd -g SYS -d /home/SYS SYS-03 为新用户SYS-01、SYS-02、SYS-03设密码 （baidu.com@ip） [root@vsftpdserver ~]# passwd SYS-01 Changing password for user SYS-01. New password: Retype new password: passwd: all authentication tokens updated successfully. [root@vsftpdserver ~]# passwd SYS-02 Changing password for user SYS-02. New password: Retype new password: passwd: all authentication tokens updated successfully. [root@vsftpdserver ~]# passwd SYS-03 Changing password for user SYS-03. New password: Retype new password: passwd: all authentication tokens updated successfully. 设置目录属主为用户SYS-01 [root@vsftpdserver ~]# chown SYS-01 /home/SYS 设置目录属组为组SYS [root@vsftpdserver ~]# chown .SYS /home/SYS 设置目录访问权限SYS-01为读，写，执行；SYS-02，SYS-03为读，执行 [root@vsftpdserver ~]# chmod 750 /home/SYS 使用SYS-01登陆到服务端：分别执行创建目录文件、重命名文件以及删除目录文件 [root@ip-ftp_client ~]# ftp 192.168.198.141 4449 Connected to 192.168.198.141 (192.168.198.141). 220 (vsFTPd 2.2.2) Name (192.168.198.141:root): SYS-01 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; cd /home/SYS 250 Directory successfully changed. ftp&gt; mkdir SYS-01 257 &quot;/home/SYS/SYS-01&quot; created ftp&gt; rename SYS-01 SYS-01_database 350 Ready for RNTO. 250 Rename successful. ftp&gt; rmdir SYS-01_database 250 Remove directory operation successful. 使用SYS-02登陆到服务端：分别执行创建目录文件、重命名文件以及删除目录文件 [root@ip-ftp_client ~]# ftp 192.168.198.141 4449 Connected to 192.168.198.141 (192.168.198.141). 220 (vsFTPd 2.2.2) Name (192.168.198.141:root): SYS-02 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; ls 227 Entering Passive Mode (192,168,198,141,228,42). 150 Here comes the directory listing. -rw-r--r-- 1 0 0 0 Jul 19 22:08 sys_log 226 Directory send OK. tp&gt; mkdir SYS-02 550 Create directory operation failed. 使用SYS-03登陆到服务端：分别执行创建目录文件、重命名文件以及删除目录文件 root@ip-ftp_client ~]# ftp 192.168.198.141 4449 Connected to 192.168.198.141 (192.168.198.141). 220 (vsFTPd 2.2.2) Name (192.168.198.141:root): SYS-03 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; cd /home/SYS 250 Directory successfully changed. ftp&gt; ls 227 Entering Passive Mode (192,168,198,141,178,100). 150 Here comes the directory listing. -rw-r--r-- 1 0 0 0 Jul 19 22:08 sys_log 226 Directory send OK. ftp&gt; mkdir SYS-03 550 Create directory operation failed. 由于本地用户登录FTP服务器后进入自己主目录，而SYS-01,SYS-02 SYS-03对主目录/home/SYS分配的权限不同，所以通过FTP访问的权限也不同，SYS-01访问权限为：上传，下载，建目录；SYS-02，SYS-03访问权限为下载，浏览，不能建目录和上传。实现了群组中用户不同访问级别，加强了对FTP服务器的分级安全管理。 3）虚拟用户模式 虚拟用户模式是一种相比较来说最为安全的验证方式，需要为FTP传输服务单独建立用户数据库文件，虚拟出用来口令验证的帐户信息，这些帐号是在服务器系统中不存在的，仅供FTP传输服务做验证使用，因此这样即便骇客破解出了帐号口令密码后也无法登录到服务器主机上面，有效的降低了破坏范围和影响。所以只要在配置妥当合理的情况下，虚拟用户模式要比前两种验证方式更加的安全，同时配置的流程也稍微会复杂一些。 第一步：创建用于进行FTP验证的帐号密码数据库文件，单数行为账户名，偶数行为密码，例如分别创建出support-01和support-02两个用户，密码均为baidu.com@ip [root@vsftpdserver SYS]# cd /etc/vsftpd/ [root@vsftpdserver vsftpd]# vi vuser.list support-01 baidu.com@ip support-02 baidu.com@ip 明文信息既不安全，也不能让vsftpd服务程序直接读取，因此需要使用db_load命令用HASH算法将这个原始的明文信息文件转换成数据库文件，并且再把数据库文件权限调小一些（避免其他人能看到数据库文件的内容），然后再把原始的明文信息文件删除掉。 [root@vsftpdserver vsftpd]# db_load -T -t hash -f vuser.list vuser.db [root@vsftpdserver vsftpd]# file vuser.db vuser.db: Berkeley DB (Hash, version 9, native byte-order) [root@vsftpdserver vsftpd]# chmod 600 vuser.db [root@vsftpdserver vsftpd]# rm -f vuser.list 第2步：创建用于FTP服务存储文件的根目录以及虚拟用户映射的系统本地用户，FTP服务存储文件的根目录指的是当虚拟用户登陆后默认所在的位置，但在Linux系统中的每一个文件都是有所有者和所有组属性的，例如用support-01帐户创建了一个新文件，但是support-01这个用户在系统中是找不到的，就会导致Linux系统中这个文件权限出现错误。因此还需要再创建一个用来让虚拟用户映射的系统本地用户，简单来说就是让虚拟用户默认登陆到这个本地用户的家目录中，创建的文件属性也都归属于这个本地用户，避免本地Linux系统无法处理这种虚拟用户创建的文件属性权限。为了方便管理FTP资料，可以把这个用于虚拟用户映射的系统本地用户的家目录设置到/var目录中（因为该目录是用来存放经常发生改变的数据），并且为了安全起见把这个系统本地用户的终端设置成不允许登陆，这不会影响虚拟用户的使用 。 [root@vsftpdserver vsftpd]# useradd -d /var/ftproot -s /sbin/nologin virtual [root@vsftpdserver vsftpd]# ls -ld /var/ftproot/ drwx------ 4 virtual virtual 4096 Jul 19 22:38 /var/ftproot/ [root@vsftpdserver vsftpd]# chmod -Rf 755 /var/ftproot/ 第3步：建立用于支持虚拟用户的PAM认证文件 [root@vsftpdserver vsftpd]# vi /etc/pam.d/vsftpd.vu auth required pam_userdb.so db=/etc/vsftpd/vuser account required pam_userdb.so db=/etc/vsftpd/vuser 第4步：在vsftpd服务程序主配置文件中修改PAM支持文件 [root@vsftpdserver vsftpd]# vi /etc/vsftpd/vsftpd.confanonymous_enable=NO local_enable=YES guest_enable=YES guest_username=virtual allow_writeable_chroot=YES write_enable=YES local_umask=022 dirmessage_enable=YES xferlog_enable=YES connect_from_port_20=YES xferlog_std_format=YES listen=YES listen_port=4449 pam_service_name=vsftpd.vu userlist_enable=YES tcp_wrappers=YES 第5步：为虚拟用户设置不同的权限，虽然support-01和support-02两个帐户都是用于FTP服务验证的虚拟帐户，但也想在他们之间区别对待。比如只允许support-01用户能够上传、创建、修改、查看、删除文件，而support-02只能查看文件，这其实也是可以让vsftpd服务程序实现的，只需要新建一个目录，在里面分别创建两个以support-01和support-02命名的文件，其中在support-01命名的文件中写入相关允许的权限 [root@vsftpdserver vsftpd]# mkdir /etc/vsftpd/vusers_dir/ [root@vsftpdserver vsftpd]# cd /etc/vsftpd/vusers_dir/ [root@vsftpdserver vusers_dir]# touch support-02 [root@vsftpdserver vusers_dir]# vi support-01 anon_upload_enable=YES anon_mkdir_write_enable=YES anon_other_write_enable=YES 再次修改下vsftpd主配置文件，添加user_config_dir参数来定义这两个虚拟用户不同权限的配置文件所存放的路径即可，为了让刚刚配置的服务程序新参数立即生效，需要把vsftpd再来重新启动一下，并加入到开机启动项中。 [root@vsftpdserver vusers_dir]# vi /etc/vsftpd/vsftpd.conf anonymous_enable=NO local_enable=YES guest_enable=YES guest_username=virtual allow_writeable_chroot=YES pam_service_name=vsftpd.vu write_enable=YES local_umask=022 dirmessage_enable=YES xferlog_enable=YES connect_from_port_20=YES xferlog_std_format=YES listen=YES user_config_dir=/etc/vsftpd/vusers_dir listen_port=4449 userlist_enable=YES tcp_wrappers=YES [root@vsftpdserver vusers_dir]# service vsftpd restart Shutting down vsftpd: [ OK ] Starting vsftpd for vsftpd: [ OK ] [root@vsftpdserver vusers_dir]# chkconfig vsftpd on 客户端测试登陆support-02： [root@ip-ftp_client ~]# ftp 192.168.198.141 4449 Connected to 192.168.198.141 (192.168.198.141). 220 (vsFTPd 2.2.2) Name (192.168.198.141:root): support-02 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; mkdir support-02 550 Permission denied. 客户端测试登陆support-01： [root@ip-ftp_client ~]# ftp 192.168.198.141 4449 Connected to 192.168.198.141 (192.168.198.141). 220 (vsFTPd 2.2.2) Name (192.168.198.141:root): support-01 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; mkdir support-01 257 &quot;/support-01&quot; created ftp&gt; rename support-01 support-01_log 350 Ready for RNTO. 250 Rename successful. ftp&gt; rmdir support-01_log 250 Remove directory operation successful.]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sshd服务防止暴力破解]]></title>
    <url>%2F2017%2F12%2F15%2Fsshd%E6%9C%8D%E5%8A%A1%E9%98%B2%E6%AD%A2%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[一、sshd服务防止暴力破解1)使用强密码 8位以上，大小写，特殊符号 2修改默认端口号（22） [root@lszlab01 ~]# vi /etc/ssh/sshd_config #Port 22 port 801 #默认为22 3）不使用root账号登陆 有两种方法实现 a) 修改/etc/passwd 文件 [root@lszlab01 ~]# vi /etc/passwd root:x:0:0:root:/root:/bin/bash 修改为： root:x:0:0:root:/root:/sbin/nologin b)修改/etc/ssh/sshd_config文件 [root@lszlab01 ~]# vi /etc/ssh/sshd_config #PermitRootLogin yes PermitRootLogin no 将普通用户，设置成系统管理员，因为有些程序需要使用root权限 [root@lszlab01 ~]# vi /etc/passwd gzns:x:500:500::/home/gzns:/bin/bash 改为： gzns:x:0:0::/home/gzns:/bin/bash 判断用户是否是超级管理员，就看它的 UID=0 测试一下，使用root账号登陆 [root@lszlab01 ~]# ssh 192.168.198.137 root@192.168.198.137&apos;s password: Last login: Thu May 25 23:38:18 2017 from 192.168.198.137 This account is currently not available. Connection to 192.168.198.137 closed. 使用gzns登陆 [root@lszlab01 ~]# ssh gzns@192.168.198.137 gzns@192.168.198.137&apos;s password: Last login: Thu May 25 23:54:27 2017 from 192.168.198.137 [root@lszlab01 ~]# pwd /home/gzns 4)暴力破解问题严重，使用fail2ban,把暴力破解的ip地址直接禁掉 如果公网网站被暴力破解时，虽然破解不成功，会导致系统负载很高，暴力破解时，系统要不断地去验证用户，这时系统的开销会增加，导致网站速度变慢。 a)下载fail2ban源码包，上传服务器（www.fail2ban.org） 解压代码包 [root@lszlab01 ~]# tar -zxvf fail2ban-0.8.14.tar.gz cd到fail2ban-0.9.4目录下 [root@lszlab01 ~]# cd fail2ban-0.8.14 可以查看一下fail2ban-0.8.14目录下的README.md文件，里面有安装的说明 [root@lszlab01 fail2ban-0.8.14]# cat README.md Installation: ------------- **It is possible that Fail2ban is already packaged for your distribution. In this case, you should use it instead.** Required: - [Python2 &gt;= 2.6 or Python &gt;= 3.2](http://www.python.org) or [PyPy](http://pypy.org) Optional: - [pyinotify &gt;= 0.8.3](https://github.com/seb-m/pyinotify) - Linux &gt;= 2.6.13 - [gamin &gt;= 0.0.21](http://www.gnome.org/~veillard/gamin) - [systemd &gt;= 204](http://www.freedesktop.org/wiki/Software/systemd) - [dnspython](http://www.dnspython.org/) To install, just do: tar xvfj fail2ban-0.8.14.tar.bz2 cd fail2ban-0.8.14 python setup.py install 查看python的版本 [root@lszlab01 fail2ban-0.8.14]#python -V Python 2.6.6 安装： [root@lszlab01 fail2ban-0.8.14]# python setup.py install 生成服务启动的脚本 [root@lszlab01 fail2ban-0.8.14]# grep chkconfig ./* -R --color ./files/redhat-initd:# chkconfig: - 92 08 [root@lszlab01 fail2ban-0.8.14]# cp files/redhat-initd /etc/init.d/fail2ban [root@lszlab01 fail2ban-0.8.14]# chkconfig --add fail2ban [root@lszlab01 fail2ban-0.8.14]# chkconfig --list fail2ban fail2ban 0:off 1:off 2:off 3:on 4:on 5:on 6:off 配置文件 /etc/fail2ban/fail2ban.conf #定义fail2ban 日志级别，日志位置及sock文件位置 /etc/fail2ban/jail.conf #主配置文件 /etc/fail2ban/action.d #动作文件夹，包含默认文件，，iptables以及mail动作 /etc/fail2ban/filter.d #条件文件夹，包含默认文件，过滤日志关键内容位置 案例：ssh远程5分钟3次密码验证失败，禁止用户iP访问主机5小时，5小时限制自动解除，用户重新登陆 修改主配置文件 [root@lszlab01 fail2ban-0.8.14]# vi /etc/fail2ban/jail.conf [ssh-iptables] enabled = true filter = sshd action = iptables[name=SSH, port=ssh, protocol=tcp] sendmail-whois[name=SSH, dest=you@example.com, sender=fail2ban@example.com, sendername=&quot;Fail2Ban&quot;] logpath = /var/log/secure maxretry = 3 findtime = 500 bantime =18000 保存退出后重启服务： [root@lszlab01 fail2ban-0.8.14]# service fail2ban start 测试： 先查看一下防火墙的列表： [root@lszlab01 fail2ban-0.8.14]#ptables -L Chain INPUT (policy ACCEPT) target prot opt source destination fail2ban-SSH tcp -- anywhere anywhere tcp dpt:ssh Chain FORWARD (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination 列表里面增加了一条关于fail2ban的策略 先清空一下登陆的日志 [root@lszlab01 fail2ban-0.8.14]# &gt; /var/log/secure 然后连续登录输错密码3次 [root@lszlab02 ~]# ssh 192.168.198.140 root@192.168.198.140&apos;s password: Permission denied, please try again. root@192.168.198.140&apos;s password: Permission denied, please try again. root@192.168.198.140&apos;s password: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password). [root@lszlab01 ~]# ssh 192.168.198.140 ssh: connect to host 192.168.198.140 port 22: Connection refused 三次输入密码后，直接把ip地址禁掉 在查看一下日志 [root@lszlab01 fail2ban-0.8.14]# cat /var/log/secure Jul 29 14:31:33 slave_mysql sshd[3813]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=192.168.198.102 user=root Jul 29 14:31:36 slave_mysql sshd[3813]: Failed password for root from 192.168.198.102 port 48165 ssh2 Jul 29 14:31:41 slave_mysql sshd[3813]: Failed password for root from 192.168.198.102 port 48165 ssh2 Jul 29 14:31:45 slave_mysql sshd[3813]: Failed password for root from 192.168.198.102 port 48165 ssh2 Jul 29 14:31:45 slave_mysql sshd[3814]: Connection closed by 192.168.198.102 Jul 29 14:31:45 slave_mysql sshd[3813]: PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=192.168.198.102 user=root 在查看一下防火墙 [root@lszlab01 fail2ban-0.8.14]#ptables -L Chain INPUT (policy ACCEPT) target prot opt source destination fail2ban-SSH tcp -- anywhere anywhere tcp dpt:ssh Chain FORWARD (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination Chain fail2ban-SSH (1 references) target prot opt source destination REJECT all -- 192.168.198.102 anywhere reject-with icmp-port-unreachable RETURN all -- anywhere anywhere 查看fail2ban工作状态 [root@lszlab01 fail2ban-0.8.14]# fail2ban-client status Status |- Number of jail: 1 `- Jail list: ssh-iptables 查看ssh-iptables这一项 [root@lszlab01 fail2ban-0.8.14]# fail2ban-client status ssh-iptables Status for the jail: ssh-iptables |- filter | |- File list: /var/log/secure | |- Currently failed: 0 | `- Total failed: 6 `- action |- Currently banned: 2 | `- IP list: 192.168.198.137 192.168.198.102 `- Total banned: 2 如果想要禁用的ip重连，我们可以清空fail2ban的日志或者清空防火墙规则 [root@lszlab01 fail2ban-0.8.14]# cat /var/log/fail2ban.log 2017-07-29 14:13:50,260 fail2ban.server [2035]: INFO Changed logging target to /var/log/fail2ban.log for Fail2ban v0.8.14 2017-07-29 14:13:50,262 fail2ban.jail [2035]: INFO Creating new jail &apos;ssh-iptables&apos; 2017-07-29 14:13:50,264 fail2ban.jail [2035]: INFO Jail &apos;ssh-iptables&apos; uses poller 2017-07-29 14:13:50,342 fail2ban.jail [2035]: INFO Initiated &apos;polling&apos; backend 2017-07-29 14:13:50,346 fail2ban.filter [2035]: INFO Added logfile = /var/log/secure 2017-07-29 14:13:50,349 fail2ban.filter [2035]: INFO Set maxRetry = 3 2017-07-29 14:13:50,353 fail2ban.filter [2035]: INFO Set findtime = 500 2017-07-29 14:13:50,355 fail2ban.actions[2035]: INFO Set banTime = 3600 2017-07-29 14:13:50,857 fail2ban.jail [2035]: INFO Jail &apos;ssh-iptables&apos; started 2017-07-29 14:14:27,181 fail2ban.actions[2035]: WARNING [ssh-iptables] Ban 192.168.198.137 2017-07-29 14:31:46,515 fail2ban.actions[2035]: WARNING [ssh-iptables] Ban 192.168.198.102 [root@lszlab01 fail2ban-0.8.14]# &gt; /var/log/fail2ban.log [root@lszlab01 fail2ban-0.8.14]# service fail2ban restart Stopping fail2ban: [ OK ] Starting fail2ban: [ OK ] 重新远程 [root@lszlab02 ~]# ssh 192.168.198.140 ssh: connect to host 192.168.198.140 port 22: Connection refused [root@lszlab02 ~]# ssh 192.168.198.140 root@192.168.198.140&apos;s password: Last login: Sat Jul 29 14:07:50 2017 from 192.168.198.1 [root@lszlab01 ~]# 或者直接情况防火墙策略 [root@lszlab01 ~]# iptables -F]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>sshd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RAID磁盘阵列的搭建 (一)]]></title>
    <url>%2F2017%2F12%2F15%2FRAID%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[一、RAID概念RAID（Redundant Array of Independent Disks，独立磁盘冗余阵列）可以提供较普通磁盘更高的速度、安全性，所以服务器在安装时都会选择创建RAID。 RAID的创建有两种方式：软RAID（通过操作系统软件来实现）和硬RAID（使用硬件阵列卡）；在企业中用的最多的是：raid0、raid1、raid10和raid5。不过随着云的高速发展，供应商一般可以把硬件问题解决掉。 二、常用的RAID1) RAID-0 条带 （strping），也是我们最早出现的RAID模式,需磁盘数量:2块以上(大小最好相同)是组建磁盘阵列中最简单的一种形式，只需要2块以上的硬盘即可. 特点: a)成本低，可以提高整个磁盘的性能和吞吐量 b)RAID 0没有提供冗余或错误修复能力，速度快 c)任何一个磁盘的损坏将损坏全部数据；磁盘利用率为100% 2) RAID-1 mirroring（镜像卷）,原理:是把一个磁盘的数据镜像到另一个磁盘上，也就是说数据在写入一块磁盘的同时，会在另一块闲置的磁盘上生成镜像文件，(同步) RAID 1 mirroring（镜像卷），至少需要两块硬盘，raid大小等于两个raid分区中最小的容量(最好将分区大小分为一样），数据有冗余，在存储时同时写入两块硬盘，实现了数据备份；磁盘利用率为50% 3）RAID-5 RAID 5不是对存储的数据进行备份，而是把数据和相对应的奇偶校验信息存储到组成RAID5的各个磁盘上，并且奇偶校验信息和相对应的数据分别存储于不同的磁盘上。当RAID5的一个磁盘数据发生损坏后，可以利用剩下的数据和相应的奇偶校验信息去恢复被损坏的数据。RAID 5可以理解为是RAID 0和RAID 1的折衷方案。 需要三块或以上硬盘，可以提供热备盘实现故障的恢复；只损坏一块，没有问题。但如果同时损坏两块磁盘，则数据将都会损坏。 空间利用率： (n-1)/n 4) RAID-10 镜像+条带,先创建raid1，再使用创建的raid1设备创建raid0,RAID 1与RAID 0的组合，先作RAID 1，再作RAID 0，也就是对多组RAID 1彼此构成Stripe访问。由于RAID 10是以RAID 1为基础，而RAID 1至少需要2块硬盘，因此要以多组RAID 1构成RAID 10，至少需要4块硬盘。以RAID 10最小的4台硬盘组态为例，先把4台硬盘分为2组，每组2台构成RAID 1，如此就得到两组RAID 1，然后再把两组RAID 1构成RAID 0。 RAID 10在底层的任一组或多组RAID 1中出现1台硬盘损坏时，仍能维持运作，不过如果任一组RAID 1中的两块硬盘损毁，整组RAID10就会失效。 RAID 10由于在上层把多组RAID 1构成Stripe，容量利用率是50%，例如：4块硬盘做的raid10的总容量是两块硬盘的容量。 三、搭建RAID（有硬件RAID卡,浪潮系列服务器基于LSI芯片Raid卡）1）RAID-1配置与管理 服务器开机自检到浪潮logo画面后，下一步就会进入Raid卡自检过程，此时显示器上会出现Ctrl -H提示，如下图： 按下Ctrl -H组合键后，自检完成就会进入Raid卡配置界面，如下图。在这里可以看到Raid卡的型号和Firmware固件版本，点击【Start】按钮进入Raid卡主页。 Raid卡首页叫作WebBIOS，如下图。左侧是功能菜单，右侧可以看到所有物理磁盘，本例安装了4块500G硬盘，后面所有的配置都可以在这里完成！ 在WebBIOS主页点击【Configuration Wizard】，打开配置向导 选择【Add Configuration】，点击【Next】下一步 选择【Manual Configuration】，点击【Next】下一步 左侧方框内可以看到所有未使用的硬盘。因为要做Raid1，我们选择前两块，然后点击下方的【Add to Array】将其加入到右侧方框内。 点击【Accept DG】，创建磁盘组 点击【Next】下一步 点击【Add to SPAN】，将刚才创建好的磁盘组加入到右侧方框内 点击【Next】下一步 阵列参数配置：第一个参数“Raid Level”选择Raid1，其余保持默认 最后一个参数“Select Size”输入阵列容量大小，最大值可参考右侧绿字提示（其中R0代表做Raid0最大容量，R1代表做Raid1最大容量），完成后点击【Accept】 弹出的任何提示均选择【yes】 回到配置页面，点击【Next】下一步 点击【Accept】配置完成！ 提示保存，选择【yes】 （依Raid卡型号不同，有些可能没有此功能，如没有请跳过此步）提示SSD缓存，选择【Cancel】 提示初始化，选择【yes】 正在初始化，能看到百分比进度条（速度较快，可能一闪而过） 初始化完成！点击【Home】返回首页 阵列配置完成！ Raid1状态显示“Optimal”表示正常，Drives显示两块硬盘绿色Online正常，如果还有其它未使用的硬盘，会在unconfigured Drives下面蓝色显示。 最后点击【Exit】退出，然后【Ctrl-Alt-Delete】组合键重启服务器！ 未使用的硬盘可以继续创建阵列，也可以配置成热备盘 热备盘（Hotspare）配置热备盘的作用是如果阵列中有硬盘发生故障，热备盘可以立即顶替，及时将阵列恢复为正常状态。热备盘的配置非常简单，做完阵列后，未使用的硬盘会在WebBIOS中显示为蓝色unconfigured状态，选中该硬盘进入属性页面。 选择【Make Global HSP】，点击【GO】执行 配置完成！点击【Home】返回首页 热备盘显示为粉色Hotspare状态 2)RAID-5配置与管理 在WebBIOS主页点击【Configuration Wizard】，打开配置向导 选择【Add Configuration】，点击【Next】下一步 选择【Manual Configuration】，点击【Next】下一步 左侧方框内可以看到所有未使用的硬盘。我们选择全部（也可以逐个选择），然后点击下方的【Add to Array】将其加入到右侧方框内。 点击【Accept DG】，创建磁盘组 点击【Next】下一步 点击【Add to SPAN】，将刚才创建好的磁盘组加入到右侧方框内 点击【Next】下一步 阵列参数配置：第一个参数“Raid Level”选择Raid5，其余保持默认 最后一个参数“Select Size”输入阵列容量大小，最大值可参考右侧绿字提示（其中R5代表做Raid5的最大容量），完成后点击【Accept】 弹出的任何提示均选择【yes】 回到配置页面，点击【Next】下一步 点击【Accept】配置完成！ 提示保存，选择【yes】 （依Raid卡型号不同，有些可能没有此功能，如没有请跳过此步）提示SSD缓存，选择【Cancel】 提示初始化，选择【yes】 正在初始化，能看到百分比进度条（速度较快，可能一闪而过） 初始化完成！点击【Home】返回首页 阵列配置完成！ Raid5状态显示“Optimal”表示正常，Drives显示四块硬盘绿色Online正常 最后点击【Exit】退出，然后【Ctrl-Alt-Delete】组合键重启服务器！ 删除配置: 在WebBIOS主页点击【Configuration Wizard】，打开配置向导 选择【Clear Configuration】，点击【Next】下一步 提示清除，选择【yes】 阵列删除成功！所有硬盘显示为蓝色unconfigured Good状态 3)RAID-10配置与管理 在WebBIOS主页点击【Configuration Wizard】，打开配置向导 选择【Add Configuration】，点击【Next】下一步 选择【Manual Configuration】，点击【Next】下一步 左侧方框内可以看到所有未使用的硬盘。因为要做Raid10，我们先选择前两块，然后点击下方的【Add to Array】将其加入到右侧方框内。 点击【Accept DG】，创建第一个磁盘组：Drive Group0 然后再选择后两块硬盘，也点击下方的【Add to Array】将其加入到右侧方框内 点击【Accept DG】，创建第二个磁盘组：Drive Group1 点击【Next】下一步 点击【Add to SPAN】，将刚才创建好的两个磁盘组分别加入到右侧方框内 将第二个磁盘组也添加过来 点击【Next】下一步 阵列参数配置：第一个参数“Raid Level”选择Raid10，其余保持默认 最后一个参数“Select Size”输入阵列容量大小，最大值可参考右侧绿字提示（其中R10代表做Raid10的最大容量），完成后点击【Accept】 弹出的任何提示均选择【yes】 回到配置页面，点击【Next】下一步 点击【Accept】配置完成！ 提示保存，选择【yes】 （依Raid卡型号不同，有些可能没有此功能，如没有请跳过此步）提示SSD缓存，选择【Cancel】 提示初始化，选择【yes】 正在初始化，能看到百分比进度条（速度较快，可能一闪而过） 初始化完成！点击【Home】返回首页 阵列配置完成！Raid10状态显示“Optimal”表示正常，所有硬盘绿色Online正常。最后点击【Exit】退出，然后【Ctrl-Alt-Delete】组合键重启服务器！]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>RAID</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 6.5下PXE+Kickstart无人值守安装操作系统]]></title>
    <url>%2F2017%2F12%2F15%2FPXE%2BKickstart%2F</url>
    <content type="text"><![CDATA[一、前言1.1什么是PXEPXE(Pre-boot Execution Environment，预启动执行环境)是由Intel公司开发的最新技术，工作于Client/Server的网络模式，支持工作站通过网络从远端服务器下载映像，并由此支持通过网络启动操作系统，在启动过程中，终端要求服务器分配IP地址，再用TFTP（trivial file transfer protocol）或MTFTP(multicast trivial file transfer protocol)协议下载一个启动软件包到本机内存中执行，由这个启动软件包完成终端基本软件设置，从而引导预先安装在服务器中的终端操作系统。严格来说，PXE 并不是一种安装方式，而是一种引导方式。进行 PXE 安装的必要条件是在要安装的计算机中必须包含一个 PXE 支持的网卡（NIC），即网卡中必须要有 PXE Client。PXE 协议可以使计算机通过网络启动。此协议分为 Client端和 Server 端，而PXE Client则在网卡的 ROM 中。当计算机引导时，BIOS 把 PXE Client 调入内存中执行，然后由 PXE Client 将放置在远端的文件通过网络下载到本地运行。运行 PXE 协议需要设置 DHCP 服务器和 TFTP 服务器。DHCP 服务器会给 PXE Client（将要安装系统的主机）分配一个 IP 地址，由于是给 PXE Client 分配 IP 地址，所以在配置 DHCP 服务器时需要增加相应的 PXE 设置。此外，在 PXE Client 的 ROM 中，已经存在了 TFTP Client，那么它就可以通过 TFTP 协议到 TFTP Server 上下载所需的文件了。 pxe的工作过程： PXE Client 从自己的PXE网卡启动，向本网络中的DHCP服务器索取IP； DHCP 服务器返回分配给客户机的IP 以及PXE文件的放置位置(该文件一般是放在一台TFTP服务器上) ； PXE Client 向本网络中的TFTP服务器索取pxelinux.0 文件； PXE Client 取得pxelinux.0 文件后之执行该文件； 根据pxelinux.0 的执行结果，通过TFTP服务器加载内核和文件系统 ； 进入安装画面, 此时可以通过选择HTTP、FTP、NFS 方式之一进行安装；详细工作流程，请参考下面这幅图： 1.2初认KickstartKickstart是一种无人值守的安装方式。它的工作原理是在安装过程中记录典型的需要人工干预填写的各种参数，并生成一个名为ks.cfg的文件。如果在安装过程中（不只局限于生成Kickstart安装文件的机器）出现要填写参数的情况，安装程序首先会去查找Kickstart生成的文件，如果找到合适的参数，就采用所找到的参数；如果没有找到合适的参数，便需要安装者手工干预了。所以，如果Kickstart文件涵盖了安装过程中可能出现的所有需要填写的参数，那么安装者完全可以只告诉安装程序从何处取ks.cfg文件，然后就去忙自己的事情。等安装完毕，安装程序会根据ks.cfg中的设置重启系统，并结束安装。 PXE+Kickstart 无人值守安装操作系统完整过程如下： 二、系统环境实验环境：VMware Workstation 11 系统平台：CentOS release 6.5 (最小化安装) 网络模式：NAT模式（共享主机的IP地址） DHCP / TFTP IP：192.168.198.3 HTTP / FTP / NFS IP：192.168.198.3 防火墙状态：关闭 #service iptables stop #chkconfig iptables off #service iptables status SELINUX=disabled #vi /etc/sysconfig/selinux 三、准备工作生成ks.cfg 文件需要system-config-kickstart 工具，而此工具依赖于X Windows，所以我们需要安装X Windows 和Desktop 并重启系统，操作如下： #yum groupinstall &quot;X Window System&quot; #yum groupinstall Desktop #reboot 四、配置HTTP安装方式系统的安装方式可以选择HTTP、FTP、 NFS，这里介绍HTTP方式的安装 1）安装http #yum install httpd –y #rpm -qa|grep httpd 2) 开启服务并设置开机启动 #/etc/init.d/httpd start #chkconfig --level 35 httpd on 3)在虚拟机中设置加载ISO镜像 4)将iso文件挂载至/mnt/cdrom #mkdir /mnt/cdrom #mount /dev/cdrom /mnt/cdrom 5)复制光盘全部内容至http 的根目录/var/www/html/ 下 #cp -r /mnt/cdrom/ /var/www/html/ HTTP部分设置完成。 五、配置TFTP1）安装tftp-server #yum install tftp-server –y #grep -qa|grep tftp-server 2)启用tftp服务 #vi /etc/xinetd.d/tftp 3）修改配置文件如下，将disable设置成no service tftp { socket_type = dgram protocol = udp wait = yes user = root server = /usr/sbin/in.tftpd server_args = -s /var/lib/tftpboot disable = no per_source = 11 cps = 100 2 flags = IPv4 } 4）启动tftp服务，因为tftp服务是挂载在超级进程xinetd 下的，所以通过启动xinetd 来启动tftp服务。 #/etc/init.d/xinetd restart 设置开机启动xinetd #chkconfig xinetd on 六、配置支持PXE的启动程序1）复制pxelinux.0 文件至/var/lib/tftpboot/ 文件夹中，（需要先用yum方式安装syslinux） #yum –y install syslinux #cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/ 说明：syslinux是一个功能强大的引导加载程序，而且兼容各种介质。更加确切地说：SYSLINUX是一个小型的Linux操作系统，它的目的是简化首次安装Linux的时间，并建立修护或其它特殊用途的启动盘。 2)复制iso镜像中的 /image/pxeboot/initrd.img 和 vmlinux到 /var/lib/tftpboot/ 目录中 #cp /var/www/html/cdrom/images/pxeboot/{initrd.img,vmlinuz} /var/lib/tftpboot/ 3）复制iso镜像中的 /isolinux/*.msg 到 /var/lib/tftpboot/ 目录中 #cp /var/www/html/cdrom/isolinux/*.msg /var/lib/tftpboot/ 4）在/var/lib/tftpboot/ 中新建一个pxelinux.cfg目录 #mkdir /var/lib/tftpboot/pxelinux.cfg 5）将iso 镜像中的/isolinux 目录中的isolinux.cfg复制到pxelinux.cfg目录中，同时更改文件名称为default #cp /var/www/html/cdrom/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default 6）修改default文件 #vi /var/lib/tftpboot/pxelinux.cfg/default 配置如下： default ks #默认启动的是 &apos;label ks&apos; 中标记的启动内核 prompt 1 #显示 &apos;boot: &apos; 提示符。为 &apos;0&apos; 时则不提示，将会直接启动 &apos;default&apos; 参数中指定的内容。 timeout 6 #在用户输入之前的超时时间，单位为 1/10 秒。 display boot.msg #显示某个文件的内容，注意文件的路径。默认是在/var/lib/tftpboot/ 目录下。也可以指定位类似 &apos;/install/boot.msg&apos;这样的，路径+文件名。 F1 boot.msg #按下 &apos;F1&apos; 这样的键后显示的文件。 F2 options.msg F3 general.msg F4 param.msg F5 rescue.msg label linux #&apos;label&apos; 指定你在 &apos;boot:&apos; 提示符下输入的关键字，比如boot: linux[ENTER]，这个会启动&apos;label linux&apos; 下标记的kernel 和initrd.img 文件。 kernel vmlinuz #kernel 参数指定要启动的内核。 append initrd=initrd.img #append 指定追加给内核的参数，能够在grub 里使用的追加给内核的参数，在这里也都可以使用。 label text kernel vmlinuz append initrd=initrd.img text label ks kernel vmlinuz append ks=http://192.168.198.3/ks.cfg initrd=initrd.img #告诉系统，从哪里获取ks.cfg文件 label local localboot 1 label memtest86 kernel memtest append - 七、配置DHCP1)安装DHCP服务 #yum -y install dhcp 2）复制配置模板文件到DHCP的配置目录中 #cp -f /usr/share/doc/dhcp-4.1.1/dhcpd.conf.sample /etc/dhcp/dhcpd.conf 3）修改DHCP配置文件 #vi /etc/dhcp/dhcpd.conf 配置如下： ddns-update-style interim; ignore client-updates; filename &quot;pxelinux.0&quot;; next-server 192.168.198.3; subnet 192.168.198.0 netmask 255.255.255.0 { range dynamic-bootp 192.168.198.10 192.168.198.200; option subnet-mask 255.255.255.0; option routers 192.168.198.3; option broadcast-address 192.168.198.254; default-lease-time 21600; max-lease-time 43200; } 4）启动DHCP服务 #/etc/init.d/dhcpd start 八、生成ks.cfg 文件1）安装Kickstart #yum -y install system-config-kickstart 2）在桌面环境下配置Kickstart，启动X Windows 环境，并配置Kickstart #startx #system-config-kickstart 3）注意事项：system-config-kickstart 启动报错如下 解决方法： #yum -y install glib2-devel 4）设置kickstart参数 设置语言，键盘，时区，Root密码，安装完毕后重启等。 设置安装方式，这篇文章介绍的是HTTP方式的安装，故选择HTTP 设置安装安装MBR 设置磁盘分区 分区规划：这里先测试三个主分区 分区总览 配置网络 认证配置 SELinux 和防火墙配置 图形环境配置 软件包安装选择 预览 生成ks.cfg 文件，保存在/var/www/html/ 文件夹下 打开/var/www/html/ks.cfg 文件进行查看并做修改。 #vi /var/www/html/ks.cfg 配置如下： platform=x86, AMD64, or Intel EM64T #version=DEVEL # Firewall configuration firewall --disabled # Install OS instead of upgrade install # Use network installation url --url=http://192.168.198.3/cdrom/ #这个选项告诉安装程序：到服务器192.168.198.3 的HTTP根目录下的cdrom 文件夹下寻找安装介质 # Root password rootpw --iscrypted $1$vsvtP./e$6PVMNfJd.shq2LgFJjYfA1 # System authorization information auth --useshadow --enablemd5 # Use graphical install graphical firstboot --disable # System keyboard keyboard us # System language lang en_US # SELinux configuration selinux --disabled # Installation logging level logging --level=info # Reboot after installation reboot # System timezone timezone --isUtc Asia/Shanghai # Network information network --bootproto=dhcp --device=eth0 --onboot=on # System bootloader configuration key --skip bootloader --append=&quot;rhgb quiet&quot; --location=mbr --driveorder=sda # Clear the Master Boot Record zerombr # Partition clearing information clearpart --all --initlabel # Disk partitioning information part / --fstype=&quot;ext4&quot; --size=8192 part swap --fstype=&quot;swap&quot; --size=1024 part /home --fstype=&quot;ext4&quot; --size=2048 %packages @base %end 注意事项：key –skip 如果是红帽系统，此选项可以跳过输入序列号过程；如果是CentOS 系列，则可以不保留此项内容；reboot 此选项必须存在，也必须文中设定位置，不然kickstart显示一条消息，并等待用户按任意键后才重新引导；clearpart –all –initlabel 此条命令必须添加，不然系统会让用户手动选择是否清除所有数据，这就需要人为干预了，从而导致自动化过程失败； 九、测试安装1）新建个虚拟机，添加一块500G硬盘，内存1024M够测试用就可以。 2）点击开机按钮，启动虚拟机后，快速按下F12键进入pxe环境 启动虚拟机，选择从网卡启动，DHCP 服务器正在给客户机分配IP地址。 开始下载vmlinuz 和initrd.img 3) 成功安装系统到login界面后，按前面设置的root密码进去查看，分区是否和我们设置的一样 PXE+Kickstart 无人值守安装操作系统环境搭建完毕。]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Kickstart</tag>
        <tag>PXE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx 编译安装]]></title>
    <url>%2F2017%2F12%2F15%2Fnginx%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[一、Nginx安装1）实验环境： [root@Nginx ~]# cat /etc/redhat-release CentOS release 6.4 (Final) [root@Nginx ~]# uname -a Linux Nginx 2.6.32-358.el6.x86_64 #1 SMP Fri Feb 22 00:31:26 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux 2）正式开始前，编译环境gcc g++ 开发库之类的需要提前装好 安装make ： [root@Nginx ~]# yum -y install gcc automake autoconf libtool make 安装g + + ： [root@Nginx ~]# yum install gcc gcc-c++ 3）开始安装 a)先装pcre, zlib，前者为了重写rewrite，后者为了gzip压缩。 选定源码目录，使用/usr/local/src(这个可以随意选择，看具体规划) [root@Nginx ~]# cd /usr/local/src b)安装PCRE库 ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/ 下载最新的 PCRE 源码包，使用下面命令下载编译和安装 PCRE 包： [root@Nginx src]# wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.tar.gz [root@Nginx src]# tar -zxvf pcre-8.41.tar.gz [root@Nginx src]# cd pcre-8.41 [root@Nginx pcre-8.41]# ./configure [root@Nginx pcre-8.41]# make [root@Nginx pcre-8.41]# make install c)安装zlib库 http://zlib.net/zlib-1.2.11.tar.gz 下载最新的 zlib 源码包，使用下面命令下载编译和安装 zlib包： [root@Nginx pcre-8.41]# cd /usr/local/src [root@Nginx src]# wget http://zlib.net/zlib-1.2.11.tar.gz [root@Nginx src]# tar -zvxf zlib-1.2.11.tar.gz [root@Nginx src]# cd zlib-1.2.11 [root@Nginx zlib-1.2.11]# ./configure [root@Nginx zlib-1.2.11]# make install d)安装ssl（某些vps默认没装ssl) [root@Nginx zlib-1.2.11]# cd /usr/local/src [root@Nginx src]# wget https://www.openssl.org/source/openssl-1.0.1t.tar.gz [root@Nginx src]# tar -zxvf openssl-1.0.1t.tar.gz [root@Nginx src]# cd openssl-1.0.1t [root@Nginx openssl-1.0.1t]# ./config [root@Nginx openssl-1.0.1t]# make [root@Nginx openssl-1.0.1t]# make install e)安装nginx Nginx 一般有两个版本，分别是稳定版和开发版，可以根据需求来选择这两个版本的其中一个，下面是把 Nginx 安装到 /usr/local/nginx 目录下的步骤 [root@Nginx openssl-1.0.1t]# cd /usr/local/src [root@Nginx src]# wget http://nginx.org/download/nginx-1.9.4.tar.gz [root@Nginx src]# tar -zxvf nginx-1.9.4.tar.gz [root@Nginx src]# cd nginx-1.9.4 [root@Nginx nginx-1.9.4]# ./configure --sbin-path=/usr/local/nginx/nginx \ &gt; --conf-path=/usr/local/nginx/nginx.conf \ &gt; --pid-path=/usr/local/nginx/nginx.pid \ &gt; --with-http_ssl_module \ &gt; --with-pcre=/usr/local/src/pcre-8.41 \ &gt; --with-zlib=/usr/local/src/zlib-1.2.11 \ &gt; --with-openssl=/usr/local/src/openssl-1.0.1t [root@Nginx nginx-1.9.4]# make [root@Nginx nginx-1.9.4]# make install –with-pcre=/usr/local/src/pcre-8.41 指的是pcre-8.41 的源码路径。–with-zlib=/usr//local/src/zlib-1.2.11 指的是zlib-1.2.11 的源码路径。 安装成功后 /usr/local/nginx 目录下如下: [root@Nginx nginx-1.9.4]# cd /usr/local/nginx [root@Nginx nginx]# ll total 7464 -rw-r--r-- 1 root root 1077 Aug 5 13:50 fastcgi.conf -rw-r--r-- 1 root root 1077 Aug 5 13:50 fastcgi.conf.default -rw-r--r-- 1 root root 1007 Aug 5 13:50 fastcgi_params -rw-r--r-- 1 root root 1007 Aug 5 13:50 fastcgi_params.default drwxr-xr-x 2 root root 4096 Aug 5 13:50 html -rw-r--r-- 1 root root 2837 Aug 5 13:50 koi-utf -rw-r--r-- 1 root root 2223 Aug 5 13:50 koi-win drwxr-xr-x 2 root root 4096 Aug 5 13:50 logs -rw-r--r-- 1 root root 3957 Aug 5 13:50 mime.types -rw-r--r-- 1 root root 3957 Aug 5 13:50 mime.types.default -rwxr-xr-x 1 root root 7570638 Aug 5 13:50 nginx -rw-r--r-- 1 root root 2656 Aug 5 13:50 nginx.conf -rw-r--r-- 1 root root 2656 Aug 5 13:50 nginx.conf.default -rw-r--r-- 1 root root 636 Aug 5 13:50 scgi_params -rw-r--r-- 1 root root 636 Aug 5 13:50 scgi_params.default -rw-r--r-- 1 root root 664 Aug 5 13:50 uwsgi_params -rw-r--r-- 1 root root 664 Aug 5 13:50 uwsgi_params.default -rw-r--r-- 1 root root 3610 Aug 5 13:50 win-utf f)启动nginx 确保系统的 80 端口没被其他程序占用，运行/usr/local/nginx/nginx 命令来启动 Nginx [root@Nginx nginx]# netstat -ano|grep 80 unix 2 [ ACC ] STREAM LISTENING 7806 @/com/ubuntu/upstart unix 2 [ ] DGRAM 11080 unix 3 [ ] STREAM CONNECTED 10980 unix 3 [ ] STREAM CONNECTED 10380 @/var/run/hald/dbus-g04k8Dpx0S [root@Nginx nginx]# /usr/local/nginx/nginx [root@Nginx nginx]# netstat -nltp |grep 80 tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 59829/nginx 打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 已经安装并运行成功。 到这里nginx就安装完成了，如果只是处理静态html就不用继续安装了。 二、nginx编译选项make是用来编译的，它从Makefile中读取指令，然后编译。 make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。 configure命令是用来检测你的安装平台的目标特征的。它定义了系统的各个方面，包括nginx的被允许使用的连接处理的方法，比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本，执行结束时，它会创建一个Makefile文件。 nginx的configure命令支持以下参数： –prefix=path 定义一个目录，存放服务器上的文件 ，也就是nginx的安装目录。默认使用 /usr/local/nginx。 –sbin-path=path 设置nginx的可执行文件的路径，默认为 prefix/sbin/nginx. –conf-path=path 设置在nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为prefix/conf/nginx.conf. –pid-path=path 设置nginx.pid文件，将存储的主进程的进程号。安装完成后，可以随时改变的文件名 ， 在nginx.conf配置文件中使用 PID指令。默认情况下，文件名 为prefix/logs/nginx.pid. –error-log-path=path 设置主错误，警告，和诊断文件的名称。安装完成后，可以随时改变的文件名 ，在nginx.conf配置文件中 使用 的error_log指令。默认情况下，文件名 为prefix/logs/error.log. –http-log-path=path 设置主请求的HTTP服务器的日志文件的名称。安装完成后，可以随时改变的文件名 ，在nginx.conf配置文件中 使用 的access_log指令。默认情况下，文件名 为prefix/logs/access.log. –user=name 设置nginx工作进程的用户。安装完成后，可以随时更改的名称在nginx.conf配置文件中 使用的 user指令。默认的用户名是nobody。 –group=name 设置nginx工作进程的用户组。安装完成后，可以随时更改的名称在nginx.conf配置文件中 使用的 user指令。默认的为非特权用户。 –with-select_module –without-select_module 启用或禁用构建一个模块来允许服务器使用select()方法。该模块将自动建立，如果平台不支持的kqueue，epoll，rtsig或/dev/poll。 –with-poll_module –without-poll_module 启用或禁用构建一个模块来允许服务器使用poll()方法。该模块将自动建立，如果平台不支持的kqueue，epoll，rtsig或/dev/poll。 –without-http_gzip_module — 不编译压缩的HTTP服务器的响应模块。编译并运行此模块需要zlib库。 –without-http_rewrite_module 不编译重写模块。编译并运行此模块需要PCRE库支持。 –without-http_proxy_module — 不编译http_proxy模块。 –with-http_ssl_module — 使用https协议模块。默认情况下，该模块没有被构建。建立并运行此模块的OpenSSL库是必需的。 –with-pcre=path — 设置PCRE库的源码路径。PCRE库的源码（版本4.4 - 8.30）需要从PCRE网站下载并解压。其余的工作是Nginx的./ configure和make来完成。正则表达式使用在location指令和 ngx_http_rewrite_module 模块中。 –with-pcre-jit —编译PCRE包含“just-in-time compilation”（1.1.12中， pcre_jit指令）。 –with-zlib=path —设置的zlib库的源码路径。要下载从 zlib（版本1.1.3 - 1.2.5）的并解压。其余的工作是Nginx的./ configure和make完成。ngx_http_gzip_module模块需要使用zlib 。 –with-cc-opt=parameters — 设置额外的参数将被添加到CFLAGS变量。例如,当你在FreeBSD上使用PCRE库时需要使用:–with-cc-opt=”-I /usr/local/include。.如需要需要增加 select()支持的文件数量:–with-cc-opt=”-D FD_SETSIZE=2048”. –with-ld-opt=parameters —设置附加的参数，将用于在链接期间。例如，当在FreeBSD下使用该系统的PCRE库,应指定:–with-ld-opt=”-L /usr/local/lib”.]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LVM逻辑卷-磁盘配额技术]]></title>
    <url>%2F2017%2F12%2F15%2FLVM%E9%80%BB%E8%BE%91%E5%8D%B7-%E7%A3%81%E7%9B%98%E9%85%8D%E9%A2%9D%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[一、LVM–逻辑卷管理1）LVM： Logical Volume Manager（逻辑卷管理）是Linux环境下对底层磁盘的一种管理机制，处在物理磁盘和文件系统之间的 2）概念 PV ：Physical Volume（物理卷） VG ：Volume Group（卷组） LV ：Logical Volume（逻辑卷） 最小存储单位为：PE 3）创建步骤 a)添加磁盘 sdb sdc sdd [root@lszlab01 ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 1024M 0 rom sdb 8:16 0 20G 0 disk sda 8:0 0 20G 0 disk ├─sda1 8:1 0 200M 0 part /boot ├─sda2 8:2 0 8G 0 part / └─sda3 8:3 0 3.7G 0 part [SWAP] sdd 8:48 0 20G 0 disk sdc 8:32 0 20G 0 disk b)制作PV: 先检查是否有lvm工具 [root@lszlab01 ~]# rpm -qa |grep lvm 然后使用pvcreate命令 [root@lszlab01 ~]# pvcreate /dev/sdb /dev/sdc Physical volume &quot;/dev/sdb&quot; successfully created Physical volume &quot;/dev/sdc&quot; successfully created c)制作VG： [root@lszlab01 ~]# vgcreate Vg00 /dev/sdb /dev/sdc Volume group &quot;Vg00&quot; successfully created 指定PE的大小 [root@lszlab01 ~]# vgcreate -s 16M Vg00 /dev/sdb /deb/sdbc d）制作LV： [root@lszlab01 ~]# lvcreate -n lvo01 -L 35G Vg00 Logical volume &quot;lvo01&quot; created [root@lszlab01 ~]# lvcreate -n lvo02 -L 4.5G Vg00 Logical volume &quot;lvo02&quot; created e)查看相关信息 [root@lszlab01 ~]# pvs PV VG Fmt Attr PSize PFree /dev/sdb Vg00 lvm2 a-- 20.00g 0 /dev/sdc Vg00 lvm2 a-- 20.00g 504.00m [root@lszlab01 ~]# vgs VG #PV #LV #SN Attr VSize VFree Vg00 2 2 0 wz--n- 39.99g 504.00m [root@lszlab01 ~]# lvs LV VG Attr LSize Pool Origin Data% Move Log Cpy%Sync Convert lvo01 Vg00 -wi-a---- 35.00g lvo02 Vg00 -wi-a---- 4.50g [root@lszlab01 ~]# pvscan PV /dev/sdb VG Vg00 lvm2 [20.00 GiB / 0 free] PV /dev/sdc VG Vg00 lvm2 [20.00 GiB / 504.00 MiB free] Total: 2 [39.99 GiB] / in use: 2 [39.99 GiB] / in no VG: 0 [0 ] [root@lszlab01 ~]# vgscan Reading all physical volumes. This may take a while... Found volume group &quot;Vg00&quot; using metadata type lvm2 [root@lszlab01 ~]# lvscan ACTIVE &apos;/dev/Vg00/lvo01&apos; [35.00 GiB] inherit ACTIVE &apos;/dev/Vg00/lvo02&apos; [4.50 GiB] inherit [root@lszlab01 ~]# pvdisplay --- Physical volume --- PV Name /dev/sdb VG Name Vg00 PV Size 20.00 GiB / not usable 4.00 MiB Allocatable yes (but full) PE Size 4.00 MiB Total PE 5119 Free PE 0 Allocated PE 5119 PV UUID xqc1yf-gs4A-v2Xa-7Tne-s2rl-cBRz-XKhAou --- Physical volume --- PV Name /dev/sdc VG Name Vg00 PV Size 20.00 GiB / not usable 4.00 MiB Allocatable yes PE Size 4.00 MiB Total PE 5119 Free PE 126 Allocated PE 4993 PV UUID xoxAkF-9yYx-PDJ4-45xJ-fuap-3wWN-YtHPXh [root@lszlab01 ~]# vgdisplay --- Volume group --- VG Name Vg00 System ID Format lvm2 Metadata Areas 2 Metadata Sequence No 3 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 0 Max PV 0 Cur PV 2 Act PV 2 VG Size 39.99 GiB PE Size 4.00 MiB Total PE 10238 Alloc PE / Size 10112 / 39.50 GiB Free PE / Size 126 / 504.00 MiB VG UUID wwfTjS-Ogu7-MWHY-dhlm-syvj-oUeL-pUyLJw [root@lszlab01 ~]# lvdisplay --- Logical volume --- LV Path /dev/Vg00/lvo01 LV Name lvo01 VG Name Vg00 LV UUID xMpAIJ-ffy7-GGxA-gOJ9-4vPN-lgKU-51LQho LV Write Access read/write LV Creation host, time lszlab01, 2017-05-23 23:34:22 +0000 LV Status available # open 0 LV Size 35.00 GiB Current LE 8960 Segments 2 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 --- Logical volume --- LV Path /dev/Vg00/lvo02 LV Name lvo02 VG Name Vg00 LV UUID 8WM1IQ-fQc5-UKsm-Nl0M-SOSC-J4YZ-71nM0t LV Write Access read/write LV Creation host, time lszlab01, 2017-05-23 23:45:01 +0000 LV Status available # open 0 LV Size 4.50 GiB Current LE 1152 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:1 f)格式化分区 [root@lszlab01 ~]# mkfs -t ext3 -c /dev/Vg00/lvo01 [root@lszlab01 ~]# mkfs -t ext3 -c /dev/Vg00/lvo02 挂载，采用UUID的方式挂载到 /home/LV /home/LV1 [root@lszlab01 ~]# blkid /dev/sda2: UUID=&quot;f0e8507a-67a3-4c5b-817a-22a10118eeb5&quot; TYPE=&quot;ext4&quot; /dev/sdb: UUID=&quot;xqc1yf-gs4A-v2Xa-7Tne-s2rl-cBRz-XKhAou&quot; TYPE=&quot;LVM2_member&quot; /dev/sda1: UUID=&quot;a52fc10a-b145-40cd-b037-2780c6579379&quot; TYPE=&quot;ext4&quot; /dev/sda3: UUID=&quot;361e88a4-3972-4157-a90b-0a2280aa634c&quot; TYPE=&quot;swap&quot; /dev/mapper/Vg00-lvo01: UUID=&quot;8282b190-75a2-481c-ad94-c5ca53f7b0fb&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdc: UUID=&quot;xoxAkF-9yYx-PDJ4-45xJ-fuap-3wWN-YtHPXh&quot; TYPE=&quot;LVM2_member&quot; /dev/mapper/Vg00-lvo02: UUID=&quot;ebccf12d-ef22-4576-b98e-8c845c9097cb&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; [root@lszlab01 ~]# mkdir /home/LV [root@lszlab01 ~]# mkdir /home/LV1 编辑/etc/fstab,退出保存 [root@lszlab01 ~]# vi /etc/fstab UUID=ebccf12d-ef22-4576-b98e-8c845c9097cb /home/LV ext3 defaults 0 0 UUID=8282b190-75a2-481c-ad94-c5ca53f7b0fb /home/LV1 ext3 defaults 0 0 重新挂载 [root@lszlab01 LV]# mount -a [root@lszlab01 LV]# mount /dev/sda2 on / type ext4 (rw) proc on /proc type proc (rw) sysfs on /sys type sysfs (rw) devpts on /dev/pts type devpts (rw,gid=5,mode=620) tmpfs on /dev/shm type tmpfs (rw) /dev/sda1 on /boot type ext4 (rw) none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw) /dev/mapper/Vg00-lvo01 on /home/LV type ext3 (rw) /dev/mapper/Vg00-lvo02 on /home/LV type ext3 (rw) /dev/mapper/Vg00-lvo01 on /home/LV1 type ext3 (rw) /dev/mapper/Vg00-lvo02 on /home/LV1 type ext3 (rw) g)LV扩展(LVM支持动态扩容) 先查看一下基本情况 [root@lszlab01 ~]# vgs VG #PV #LV #SN Attr VSize VFree Vg00 2 2 0 wz--n- 39.99g 504.00m [root@lszlab01 ~]# lvs LV VG Attr LSize Pool Origin Data% Move Log Cpy%Sync Convert lvo01 Vg00 -wi-ao--- 35.00g lvo02 Vg00 -wi-ao--- 4.50g 增加一块磁盘sdd，创建成pv 扩容卷组，然后扩容lv [root@lszlab01 ~]# pvcreate /dev/sdd Physical volume &quot;/dev/sdd&quot; successfully created [root@lszlab01 ~]# vgextend Vg00 /dev/sdd Volume group &quot;Vg00&quot; successfully extended 查看一下，卷组增加了20G空闲空间 [root@lszlab01 ~]# vgs VG #PV #LV #SN Attr VSize VFree Vg00 3 2 0 wz--n- 59.99g 20.49g 然后扩展lvo02的大小+20G [root@lszlab01 ~]# lvextend -L +20G /dev/Vg00/lvo02 Extending logical volume lvo02 to 24.50 GiB Logical volume lvo02 successfully resized 查看一下 [root@lszlab01 ~]# lvs LV VG Attr LSize Pool Origin Data% Move Log Cpy%Sync Convert lvo01 Vg00 -wi-ao--- 35.00g lvo02 Vg00 -wi-ao--- 24.50g 在df -h看一下 lvo02大小没有变 root@lszlab01 ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/sda2 7.9G 5.1G 2.5G 67% / tmpfs 206M 0 206M 0% /dev/shm /dev/sda1 194M 32M 153M 18% /boot /dev/mapper/Vg00-lvo02 4.5G 138M 4.1G 4% /home/LV /dev/mapper/Vg00-lvo01 35G 177M 33G 1% /home/LV1 最后要使用resizefs2命令重新加载逻辑卷的大小才能生效 [root@lszlab01 ~]# resize2fs /dev/Vg00/lvo02 在查看一下 [root@lszlab01 ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/sda2 7.9G 5.1G 2.5G 67% / tmpfs 206M 0 206M 0% /dev/shm /dev/sda1 194M 32M 153M 18% /boot /dev/mapper/Vg00-lvo02 25G 141M 23G 1% /home/LV /dev/mapper/Vg00-lvo01 35G 177M 33G 1% /home/LV1 扩容成功，而且数据不受影响 [root@lszlab01 ~]# cd /home/LV [root@lszlab01 LV]# ll total 16 -rw-r--r-- 1 root root 0 May 24 00:33 1 -rw-r--r-- 1 root root 0 May 24 00:33 2 -rw-r--r-- 1 root root 0 May 24 00:33 3 -rw-r--r-- 1 root root 0 May 24 00:33 4 -rw-r--r-- 1 root root 0 May 24 00:33 5 -rw-r--r-- 1 root root 0 May 24 00:33 6 -rw-r--r-- 1 root root 0 May 24 00:33 7 drwx------ 2 root root 16384 May 23 23:58 lost+found h)LV缩减 [root@lszlab01 LV]# fuser -k /dev/Vg00/lvo02 [root@lszlab01 LV]# umount /home/LV #卸载分区 [root@lszlab01 LV]# e2fsck -f /dev/Vg00/lvo02 #检查文件系统是否正常工作，-f : 强制检查 e2fsck 1.41.12 (17-May-2010) Pass 1: Checking inodes, blocks, and sizes Pass 2: Checking directory structure Pass 3: Checking directory connectivity Pass 4: Checking reference counts Pass 5: Checking group summary information /dev/Vg00/lvo02: 48/1605632 files (2.1% non-contiguous), 143377/6422528 blocks [root@lszlab01 LV]# resize2fs /dev/Vg00/lvo02 10G resize2fs 1.41.12 (17-May-2010) Resizing the filesystem on /dev/Vg00/lvo02 to 2621440 (4k) blocks. The filesystem on /dev/Vg00/lvo02 is now 2621440 blocks long. [root@lszlab01 LV]# lvreduce -L 10G /dev/Vg00/lvo02 WARNING: Reducing active logical volume to 10.00 GiB THIS MAY DESTROY YOUR DATA (filesystem etc.) Do you really want to reduce lvo02? [y/n]: Y Reducing logical volume lvo02 to 10.00 GiB Logical volume lvo02 successfully resized [root@lszlab01 LV]# lvs LV VG Attr LSize Pool Origin Data% Move Log Cpy%Sync Convert lvo01 Vg00 -wi-ao--- 35.00g lvo02 Vg00 -wi-a---- 10.00g [root@lszlab01 LV]# mount -a [root@lszlab01 LV]# df -h Filesystem Size Used Avail Use% Mounted on /dev/sda2 7.9G 5.1G 2.5G 67% / tmpfs 206M 0 206M 0% /dev/shm /dev/sda1 194M 32M 153M 18% /boot /dev/mapper/Vg00-lvo01 35G 177M 33G 1% /home/LV1 /dev/mapper/Vg00-lvo02 9.9G 165M 9.2G 2% /home/LV vg缩减 缩减时，可以不卸载正在使用中的LV。另外，只能缩减没有被使用的pv [root@lszlab01 ~]# vgreduce /dev/Vg00/lvo02 LVM删除： 1）删除逻辑卷 [root@lszlab01 ~]# umount /dev/Vg00/lvo02 [root@lszlab01 ~]# lvremove /dev/Vg00/lvo02 2）删除卷 [root@lszlab01 ~]# vgremove Vg00 3）删pv [root@lszlab01 ~]# pvremove /dev/sdd 二、LVM快照创建一个快照，备份lvo02， （原来要有lv,vg需要有足够空间） [root@lszlab01 ~]# lvcreate -s -n lvo02_sp_bak -L 2G /dev/Vg00/lvo02 Logical volume &quot;lvo02_sp_bak&quot; created [root@lszlab01 ~]# lvs LV VG Attr LSize Pool Origin Data% Move Log Cpy% Sync Convert lvo01 Vg00 -wi-ao--- 35.00g lvo02 Vg00 owi-aos-- 10.00g lvo02_sp_bak Vg00 swi-a-s-- 2.00g lvo02 0.00 挂载快照到/home/LV1/data_bak [root@lszlab01 ~]# vi /etc/fstab /dev/Vg00/lvo02_sp_bak /home/LV1/data_bak ext3 defaults 0 0 重新挂载 [root@lszlab01 ~]# mount -a [root@lszlab01 ~]# mount /dev/sda2 on / type ext4 (rw) proc on /proc type proc (rw) sysfs on /sys type sysfs (rw) devpts on /dev/pts type devpts (rw,gid=5,mode=620) tmpfs on /dev/shm type tmpfs (rw) /dev/sda1 on /boot type ext4 (rw) /dev/mapper/Vg00-lvo01 on /home/LV1 type ext3 (rw) none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw) /dev/mapper/Vg00-lvo02 on /home/LV type ext3 (rw) /dev/mapper/Vg00-lvo02_sp_bak on /home/LV1/data_bak type ext3 (rw) 查看一下挂载目录里面的文件 [root@lszlab01 ~]# ll /home/LV1/data_bak total 20 -rw-r--r-- 1 root root 0 May 24 00:33 1 -rw-r--r-- 1 root root 0 May 24 03:53 1.sh -rw-r--r-- 1 root root 0 May 24 00:33 2 -rw-r--r-- 1 root root 0 May 24 03:53 2.sh -rw-r--r-- 1 root root 0 May 24 00:33 3 -rw-r--r-- 1 root root 0 May 24 03:53 3.sh -rw-r--r-- 1 root root 0 May 24 00:33 4 -rw-r--r-- 1 root root 0 May 24 03:53 4.sh -rw-r--r-- 1 root root 0 May 24 00:33 5 -rw-r--r-- 1 root root 0 May 24 03:53 5.sh -rw-r--r-- 1 root root 0 May 24 00:33 6 -rw-r--r-- 1 root root 0 May 24 03:53 6.sh -rw-r--r-- 1 root root 0 May 24 00:33 7 dr-xr-xr-x 5 root root 4096 May 24 01:57 boot drwx------ 2 root root 16384 May 23 23:58 lost+found 备份到备份目录 [root@lszlab01 ~]# cp -r /home/LV1/data_bak /home/bak 三、磁盘配额查看安装包 [root@lszlab01 data_bak]# rpm -q quota quota-3.17-18.el6.x86_64 启用quota磁盘配额功能 [root@lszlab01 ~]# mount -o remount,usrquota,grpquota /home/LV1 [root@lszlab01 ~]# mount [root@lszlab01 data_bak]# vi /etc/fstab UUID=8282b190-75a2-481c-ad94-c5ca53f7b0fb /home/LV1 ext3 defaults,usrquota,grpquota 0 0 重新挂载 [root@lszlab01 data_bak]# mount -a 检测磁盘配额并生成配额文件 [root@lszlab01 ~]# quotacheck -cugv /home/LV1 [root@lszlab01 ~]# ll /home/LV1 total 36 -rw------- 1 root root 6144 May 24 04:34 aquota.group -rw------- 1 root root 6144 May 24 04:34 aquota.user drwxr-xr-x 4 root root 4096 May 24 03:53 data_bak drwx------ 2 root root 16384 May 23 23:57 lost+found 用户和组账号的配额设置 [root@lszlab01 ~]# groupadd dba [root@lszlab01 ~]# useradd -g dba -d /home/dba dba02 配置限额 [root@lszlab01 ~]# edquota -g dba Disk quotas for group dba (gid 503): Filesystem blocks soft hard inodes soft hard /dev/mapper/Vg00-lvo01 0 120 150 0 0 0 ~激活磁盘配额 [root@lszlab01 dba]# quotaon -ugv /home/LV1 /dev/mapper/Vg00-lvo01 [/home/LV1]: group quotas turned on /dev/mapper/Vg00-lvo01 [/home/LV1]: user quotas turned on 测试： [root@lszlab01 LV1]# mkdir test_dba [root@lszlab01 LV1]# chmod 777 /home/LV1/test_dba [dba02@lszlab01 test_dba]$ dd if=/dev/zero of=123.txt bs=1K count=120 dm-0: warning, group block quota exceeded. 120+0 records in 120+0 records out 122880 bytes (123 kB) copied, 0.000342237 s, 359 MB/s [dba02@lszlab01 test_dba]$ dd if=/dev/zero of=3.txt bs=1K count=1800 dm-0: warning, group block quota exceeded. dm-0: write failed, group block limit reached. dd: writing `3.txt&apos;: Disk quota exceeded 145+0 records in 144+0 records out 147456 bytes (147 kB) copied, 0.000889251 s, 166 MB/s]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>LVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux日志管理与rsyslog远程服务器搭建]]></title>
    <url>%2F2017%2F12%2F15%2Flinux%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E4%B8%8Ersyslog%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[一、日志概述1）常用的系统日志如下: 核心启动日志:/var/log/dmesg 系统报错或重启服务等日志:/var/log/messages 邮件系统日志:/var/log/maillog cron(定制任务日志)日志:/var/log/cron 验证系统用户登录：/var/log/secure 2）文件/var/log/wtmp ，记录所有的登陆和登出 last命令查看所有登录过系统的用户和IP [root@all-log-server ~]# last root pts/0 192.168.198.1 Sat Jul 22 15:37 still logged in reboot system boot 2.6.32-431.el6.x Sat Jul 22 15:24 - 15:38 (00:13) test-1 pts/3 192.168.198.1 Sat Jul 22 14:59 - down (00:23) wtmp begins Sat Jul 22 14:59:37 2017 清空登陆日志 [root@all-log-server ~]# &gt; /var/log/wtmp 再次查看，日志木有记录信息 [root@all-log-server ~]# last wtmp begins Sat Jul 22 15:41:34 2017 3）文件 /var/log/lastlog 记录每個用戶最后的登入信息 [root@all-log-server ~]# lastlog 用户名 端口 来自 最后登陆时间 root pts/0 192.168.198.1 六 7月 22 15:37:28 +0800 2017 bin **从未登录过** daemon **从未登录过** adm **从未登录过** lp **从未登录过** sync **从未登录过** shutdown **从未登录过** halt **从未登录过** mail **从未登录过** uucp **从未登录过** operator **从未登录过** games **从未登录过** gopher **从未登录过** ftp **从未登录过** nobody **从未登录过** dbus **从未登录过** vcsa **从未登录过** saslauth **从未登录过** postfix **从未登录过** sshd **从未登录过** qd01 pts/2 192.168.198.1 六 7月 22 14:53:30 +0800 2017 test-1 pts/3 192.168.198.1 六 7月 22 14:59:37 +0800 2017 test-2 **从未登录过** 4）文件 /var/log/btmp 记录错误的登入事件 [root@all-log-server ~]# lastb btmp begins Thu Jul 20 22:41:04 2017 现在另外一台主机登陆测试 [root@lszlab ~]# ssh 192.168.198.100 The authenticity of host &apos;192.168.198.100 (192.168.198.100)&apos; can&apos;t be established. RSA key fingerprint is 2e:76:dd:05:a8:df:a6:6b:12:6f:e4:ad:4b:e1:e0:4a. Are you sure you want to continue connecting (yes/no)? y Please type &apos;yes&apos; or &apos;no&apos;: yes Warning: Permanently added &apos;192.168.198.100&apos; (RSA) to the list of known hosts. root@192.168.198.100&apos;s password: Permission denied, please try again. 再次使用lastb命令，有记录到一次错误登陆的事件 [root@all-log-server ~]# lastb root ssh:notty 192.168.198.135 Sat Jul 22 15:49 - 15:49 (00:00) btmp begins Sat Jul 22 15:49:19 2017 5）日志记录方式： 先分类，然后每个类中再分级别 主要7种日志分类(FACILITY): authpriv 安全认证相关 cron at和cron定时相关 daemon 后台进程相关 kern 内核产生 lpr 打印系统产生 mail 邮件系统相关 syslog 日志服务本身 local0到local7 #共8个类型，系统保留的：8个系统日志类型，给其它程序使用。或用户 自定义用 6)8个日志级别：以下排列，由轻到重 级别(PRIOROTY): debug 排错信息。开发人 info 正常信息 notice 稍微要注意的 warn 警告 err(error) 错误 crit(critical) 关键的错误 alert 警报警惕 emerg(emergency) 紧急，突发事件 6)日志服务 配置文件： /etc/rsyslog.conf [root@all-log-server ~]# vi /etc/rsyslog.conf # rsyslog v5 configuration file # For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html # If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html #### MODULES #### $ModLoad imuxsock # provides support for local system logging (e.g. via logger command) $ModLoad imklog # provides kernel logging support (previously done by rklogd) #$ModLoad immark # provides --MARK-- message capability # Provides UDP syslog reception #$ModLoad imudp #$UDPServerRun 514 # Provides TCP syslog reception #$ModLoad imtcp #$InputTCPServerRun 514 #### GLOBAL DIRECTIVES #### # Use default timestamp format $ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat # File syncing capability is disabled by default. This feature is usually not required, # not useful and an extreme performance hit #$ActionFileEnableSync on # Include all config files in /etc/rsyslog.d/ $IncludeConfig /etc/rsyslog.d/*.conf #### RULES #### # Log all kernel messages to the console. # Logging much else clutters up the screen. #kern.* /dev/console # Log anything (except mail) of level info or higher. # Don&apos;t log private authentication messages! *.info;mail.none;authpriv.none;cron.none /var/log/messages # The authpriv file has restricted access. authpriv.* /var/log/secure # Log all the mail messages in one place. mail.* -/var/log/maillog # Log cron stuff cron.* /var/log/cron # Everybody gets emergency messages *.emerg * # Save news errors of level crit and higher in a special file. uucp,news.crit /var/log/spooler # Save boot messages also to boot.log local7.* /var/log/boot.log # ### begin forwarding rule ### # The statement between the begin ... end define a SINGLE forwarding # rule. They belong together, do NOT split them. If you create multiple # forwarding rules, duplicate the whole block! # Remote Logging (we use TCP for reliable delivery) # # An on-disk queue is created for this action. If the remote host is # down, messages are spooled to disk and sent when it is up again. #$WorkDirectory /var/lib/rsyslog # where to place spool files #$ActionQueueFileName fwdRule1 # unique name prefix for spool files #$ActionQueueMaxDiskSpace 1g # 1gb space limit (use as much as possible) #$ActionQueueSaveOnShutdown on # save messages to disk on shutdown #$ActionQueueType LinkedList # run asynchronously #$ActionResumeRetryCount -1 # infinite retries if host is down # remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional #*.* @@remote-host:514 # ### end of the forwarding rule ### kern.* 内核类型的所级别日志 *.info;mail.none;news.none;authpriv.none;cron.none：由于 mail, news, authpriv, cron 等类别产生的信息较多，因此在 /var/log/messages 里面不记录这些项目。除此其他信息都写入 /var/log/messages 中 authpriv.* 认证方面的信息均写入 /var/log/secure ； mail.*：邮件方面的信息则均写入 /var/log/maillog ； cron.*：例行性工作排程均写入 /var/log/cron ； local7.*：将本机开机时应该显示到屏幕的讯息写入到 /var/log/boot.log ； 7）记录日志的位置： a)日志的相对路径：通常就是放在 /var/log 中 b)存在远程日志服务器上 c)有时日志会直接弹出在屏幕上。类似于wall命令 (# wall – send a message to everybody’s terminal.) [root@all-log-server ~]# wall &quot;hello&quot; Broadcast message from root@all-log-server (pts/0) (Tue Jul 25 06:07:19 2017): hello 这样所有登录Linux的虚端的用户都会收到这个信息。 8） mail.* -/var/log/maillog 减号『 - 』作用： 由于邮件所产生的信息比较多，因此我们希望邮件产生的信息先储存在速度较快的内存中 (buffer) ，等到数据量够大了才一次性的将所有数据都填入磁盘内，这样将有利于减少对磁盘读写的次数，减少IO读写开销。另外，由于信息是暂存在内存内，因此若不正常关机导致登录信息未写入到文档中，可能会造成部分数据的遗失。 9）服务重启和开机启动： [root@all-log-server ~]# service rsyslog restart 关闭系统日志记录器： [确定] 启动系统日志记录器： [确定] [root@all-log-server ~]# chkconfig rsyslog on 10）日志的存储格式 DATA TIME HOSTNAME APP (NAME) [PID]: MESSAGES 说明：DATA TIME:日志记录的日期和时间 HOSTNAME APP (NAME) [PID]:什么机器，什么程序 (程序的PID): root@all-log-server ~]# tail -n 5 /var/log/messages Jul 25 06:07:19 all-log-server wall[1253]: wall: user root broadcasted 1 lines (7 chars) Jul 25 06:11:24 all-log-server kernel: Kernel logging (proc) stopped. Jul 25 06:11:24 all-log-server rsyslogd: [origin software=&quot;rsyslogd&quot; swVersion=&quot;5.8.10&quot; x-pid=&quot;1055&quot; x-info=&quot;http://www.rsyslog.com&quot;] exiting on signal 15. Jul 25 06:11:34 all-log-server kernel: imklog 5.8.10, log source = /proc/kmsg started. Jul 25 06:11:34 all-log-server rsyslogd: [origin software=&quot;rsyslogd&quot; swVersion=&quot;5.8.10&quot; x-pid=&quot;1268&quot; x-info=&quot;http://www.rsyslog.com&quot;] start 10）用local0 定义sshd.log 修改配置文件/etc/ssh/sshd_config [root@all-log-server ~]# vi /etc/ssh/sshd_config SyslogFacility AUTHPRIV 替换成下面这条 SyslogFacility local0 重启sshd [root@all-log-server ~]# service sshd restart 停止 sshd： [确定] 正在启动 sshd： [确定] 修改配置文件/etc/rsyslog.conf [root@all-log-server ~]# vi /etc/rsyslog.conf # Save boot messages also to boot.log local7.* /var/log/boot.log local0.* /var/log/sshd.log 重启rsyslog [root@all-log-server ~]# service rsyslog restart 重启sshd [root@all-log-server ~]# service sshd restart 停止 sshd： [确定] 正在启动 sshd： [确定] 查看/var/log/sshd.log [root@all-log-server ~]# cat /var/log/sshd.log Jul 25 07:56:14 all-log-server sshd[1446]: Received signal 15; terminating. Jul 25 07:56:14 all-log-server sshd[1485]: Server listening on 0.0.0.0 port 22. Jul 25 07:56:14 all-log-server sshd[1485]: Server listening on :: port 22. 11)防止日志被删除 [root@all-log-server ~]# cat /var/log/sshd.log [root@all-log-server ~]# chattr +a /var/log/sshd.log [root@all-log-server ~]# service sshd restart 停止 sshd： [确定] 正在启动 sshd： [确定] [root@all-log-server ~]# cat /var/log/sshd.log Jul 25 08:14:28 all-log-server sshd[1535]: Received signal 15; terminating. Jul 25 08:14:28 all-log-server sshd[1558]: Server listening on 0.0.0.0 port 22. Jul 25 08:14:28 all-log-server sshd[1558]: Server listening on :: port 22. [root@all-log-server ~]# &gt; /var/log/sshd.log -bash: /var/log/sshd.log: 不允许的操作 加入了这个属性后，你的 /var/log/sshd.log 登录日志从此就仅能被增加，而不能被删除，直到 root 以 chattr -a /var/log/sshd.log 取消这个 a 的参数后，才能被删除。 [root@all-log-server ~]# chattr -a /var/log/sshd.log [root@all-log-server ~]# &gt; /var/log/sshd.log [root@all-log-server ~]# cat /var/log/sshd.log 12）日志回滚 [root@all-log-server ~]# vi /etc/logrotate.conf # see &quot;man logrotate&quot; for details # rotate log files weekly weekly 预设每个礼拜对日志档进行一次 rotate 的工作 # keep 4 weeks worth of backlogs rotate 4 保留几个日志文档，预设是保留四个！ # create new (empty) log files after rotating old ones create 回滚日志后，创建一个新的空文件来存储新的数据 # use date as a suffix of the rotated file dateext # uncomment this if you want your log files compressed #compress # RPM packages drop log rotation information into this directory include /etc/logrotate.d # no packages own wtmp and btmp -- we&apos;ll rotate them here /var/log/wtmp { monthly 每个月一次，取代每周 create 0664 root utmp 设定新建文件的权限 、所有者、用户组 minsize 1M 日志容量一定要超过 1M 后才进行 rotate rotate 1 仅保留一个，亦即仅有 wtmp.1 保留而已 } /var/log/btmp { missingok monthly create 0600 root utmp rotate 1 } # system-specific logs may be also be configured here. 二、配置远程日志服务器，实现日志集中管理1）配置服务端 [root@all-log-server ~]# vi /etc/rsyslog.conf # Provides TCP syslog reception #$ModLoad imtcp #$InputTCPServerRun 514 改成 # Provides TCP syslog reception $ModLoad imtcp $InputTCPServerRun 514 重启服务 [root@all-log-server ~]# service rsyslog restart 2）配置CLIENT端（发送端） [root@lszlab ~]# vi /etc/rsyslog.conf *.* @@192.168.198.100:514 保存重启服务 [root@lszlab ~]# /etc/init.d/rsyslog restart 3）服务端查看日志 [root@all-log-server ~]# tail -f /var/log/messages Jul 25 09:03:31 all-log-server kernel: Kernel logging (proc) stopped. Jul 25 09:03:31 all-log-server rsyslogd: [origin software=&quot;rsyslogd&quot; swVersion=&quot;5.8.10&quot; x-pid=&quot;1462&quot; x-info=&quot;http://www.rsyslog.com&quot;] exiting on signal 15. Jul 25 09:03:42 all-log-server kernel: imklog 5.8.10, log source = /proc/kmsg started. Jul 25 09:03:42 all-log-server rsyslogd: [origin software=&quot;rsyslogd&quot; swVersion=&quot;5.8.10&quot; x-pid=&quot;1591&quot; x-info=&quot;http://www.rsyslog.com&quot;] start Jul 26 13:13:03 lszlab kernel: imklog 5.8.10, log source = /proc/kmsg started. Jul 26 13:13:03 lszlab rsyslogd: [origin software=&quot;rsyslogd&quot; swVersion=&quot;5.8.10&quot; x-pid=&quot;2205&quot; x-info=&quot;http://www.rsyslog.com&quot;] start Jul 26 13:13:45 lszlab kernel: Kernel logging (proc) stopped. Jul 26 13:13:45 lszlab rsyslogd: [origin software=&quot;rsyslogd&quot; swVersion=&quot;5.8.10&quot; x-pid=&quot;2205&quot; x-info=&quot;http://www.rsyslog.com&quot;] exiting on signal 15. Jul 26 13:13:55 lszlab kernel: imklog 5.8.10, log source = /proc/kmsg started. Jul 26 13:13:55 lszlab rsyslogd: [origin software=&quot;rsyslogd&quot; swVersion=&quot;5.8.10&quot; x-pid=&quot;2218&quot; x-info=&quot;http://www.rsyslog.com&quot;] start ~~~(~^ v ^~)]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>rsyslog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux禁止ping以及开启ping的方法]]></title>
    <url>%2F2017%2F12%2F15%2FLinux%E7%A6%81%E6%AD%A2ping%E4%BB%A5%E5%8F%8A%E5%BC%80%E5%90%AFping%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Linux默认是允许Ping响应的，系统是否允许Ping由2个因素决定的： 1）内核参数 2）防火墙 需要2个因素同时允许才能允许Ping，2个因素有任意一个禁Ping就无法Ping。 第一种设置内核参数： 1）允许ping : a:临时允许PING配置 [root@CCIELAB lszlab]# echo 0 &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all b:永久允许PING配置 编辑/etc/sysctl.conf 文件 加入 net.ipv4.icmp_echo_ignore_all=0 [root@CCIELAB lszlab]# vi /etc/sysctl.conf #ping （0表示允许，1表示禁止） net.ipv4.icmp_echo_ignore_all=0 修改完成使用sysctl -p使其新配置生效 [root@CCIELAB lszlab]# sysctl -p net.ipv4.ip_forward = 0 net.ipv4.conf.default.rp_filter = 1 net.ipv4.conf.default.accept_source_route = 0 kernel.sysrq = 0 kernel.core_uses_pid = 1 net.ipv4.tcp_syncookies = 1 error: &quot;net.bridge.bridge-nf-call-ip6tables&quot; is an unknown key error: &quot;net.bridge.bridge-nf-call-iptables&quot; is an unknown key error: &quot;net.bridge.bridge-nf-call-arptables&quot; is an unknown key kernel.msgmnb = 65536 kernel.msgmax = 65536 kernel.shmmax = 68719476736 kernel.shmall = 4294967296 net.ipv4.icmp_echo_ignore_all = 0 2）禁止Ping： a：临时禁止PING配置： [root@CCIELAB lszlab]# echo 1 &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all 禁止ping 前 [qd01@ip-CentOS-6 ~]$ ping -c 3 192.168.198.141 PING 192.168.198.141 (192.168.198.141) 56(84) bytes of data. 64 bytes from 192.168.198.141: icmp_seq=1 ttl=64 time=0.291 ms 64 bytes from 192.168.198.141: icmp_seq=2 ttl=64 time=0.484 ms 64 bytes from 192.168.198.141: icmp_seq=3 ttl=64 time=0.475 ms --- 192.168.198.141 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2002ms rtt min/avg/max/mdev = 0.291/0.416/0.484/0.092 ms 禁止ping 后 PING 192.168.198.141 (192.168.198.141) 56(84) bytes of data. --- 192.168.198.141 ping statistics --- 3 packets transmitted, 0 received, 100% packet loss, time 12002ms b:永久禁止PING配置 编辑/etc/sysctl.conf 文件 加入 net.ipv4.icmp_echo_ignore_all=1 [root@CCIELAB lszlab]# vi /etc/sysctl.conf #ping （0表示允许，1表示禁止） net.ipv4.icmp_echo_ignore_all=1 修改完成使用sysctl -p使其新配置生效 [root@CCIELAB lszlab]# sysctl -p net.ipv4.ip_forward = 0 net.ipv4.conf.default.rp_filter = 1 net.ipv4.conf.default.accept_source_route = 0 kernel.sysrq = 0 kernel.core_uses_pid = 1 net.ipv4.tcp_syncookies = 1 error: &quot;net.bridge.bridge-nf-call-ip6tables&quot; is an unknown key error: &quot;net.bridge.bridge-nf-call-iptables&quot; is an unknown key error: &quot;net.bridge.bridge-nf-call-arptables&quot; is an unknown key kernel.msgmnb = 65536 kernel.msgmax = 65536 kernel.shmmax = 68719476736 kernel.shmall = 4294967296 net.ipv4.icmp_echo_ignore_all = 1 第二种：设置防火墙： 内核配置是默认值，也就是没有禁止Ping下进行设置 1）允许ping 操作 [root@CCIELAB lszlab]# iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT [root@CCIELAB lszlab]# iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT 或者临时关闭防火墙： [root@CCIELAB lszlab]# service iptables stop iptables: Flushing firewall rules: [ OK ] iptables: Setting chains to policy ACCEPT: filter [ OK ] iptables: Unloading modules: [ OK ] 2）禁止ping操作 [root@CCIELAB lszlab]# iptables -A INPUT -p icmp --icmp-type 8 -s 0/0 -j DROP]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>ping</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux磁盘管理]]></title>
    <url>%2F2017%2F12%2F15%2FLinux%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[一、关于硬盘硬盘最小储存单位是：扇区 文件系统最小储存单位是：block （1kb or 4kb) 操作系统读取硬盘时，不会一个个扇区地去读取，这样效率太低，而是一次性读取多个扇区，即一次性读取一个“块”（block）。这种由多个扇区组成的“块”，是文件存取的最小单位，block的大小。最常见是1kb ，即连2个扇区组成一个block。（4K=8扇区） 硬盘类型： SAS、SATA、SSD、SCSI、IDE MBR与GPT分区表： a) MBR,主引导记录（Master Boot Record）现有硬盘分区模式，MBR分区的标准决定了MBR只支持在2TB以内的硬盘，超过2TB的硬盘也只能管理2TB 磁盘的0柱面、0磁头、1扇区称为主引导扇区（也叫主引导记录MBR），它由三个部分组成，主引导程序、硬盘分区表DPT（Disk Partition table）和分区有效标志（55AA). 在总共512字节的主引导扇区里主引导程序（boot loader）占446个字节，第二部分是partition table区（分区表），即DPT，占64个字节，硬盘中分区有多少以及没一分区的大小都记在其中。第三部分magic number ，占2个字节，固定为55AA b) GPT,全局唯一标识分区表（GUID Partition Table）,GUID全局唯一标识符（Globally Unique Identifier）。与MBR最大4个分区 表项的限制相比，GPT对分区数量没有限制。GPT可管理硬盘大小达到18EB（1EB=1024PB=1048576TB） 二、fdisk分区工具先查看磁盘，sdb、sdc、sdd、sde、sdf、五个磁盘还没有分区 使用fdisk工具分区：一块磁盘可以分成4个主分区（4P）或者3个主分区加一个扩展分区（3p+1e） [root@ip-lab_client ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 1024M 0 rom sda 8:0 0 20G 0 disk ├─sda1 8:1 0 200M 0 part /boot ├─sda2 8:2 0 3G 0 part [SWAP] └─sda3 8:3 0 16.8G 0 part / sdb 8:16 0 20G 0 disk sdd 8:48 0 20G 0 disk sdc 8:32 0 20G 0 disk sdf 8:80 0 4.9T 0 disk sde 8:64 0 20G 0 disk 现在开始分区（4p）： [root@ip-lab_client ~]# fdisk /dev/sdb Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel Building a new DOS disklabel with disk identifier 0x4c4254db. Changes will remain in memory only, until you decide to write them. After that, of course, the previous content won&apos;t be recoverable. Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite) WARNING: DOS-compatible mode is deprecated. It&apos;s strongly recommended to switch off the mode (command &apos;c&apos;) and change display units to sectors (command &apos;u&apos;). Command (m for help): help #输入help可以查看相应的命令 h: unknown command Command action a toggle a bootable flag b edit bsd disklabel c toggle the dos compatibility flag d delete a partition l list known partition types m print this menu n add a new partition o create a new empty DOS partition table p print the partition table q quit without saving changes s create a new empty Sun disklabel t change a partition&apos;s system id u change display/entry units v verify the partition table w write table to disk and exit x extra functionality (experts only) Command (m for help): n #输入n,增加一个分区 Command action e extended p primary partition (1-4) p #输入p,为主分区 Partition number (1-4): 1 #输入1，表示第一个主分区 First cylinder (1-2610, default 1): 1 #默认从第一个分区表开始 Last cylinder, +cylinders or +size{K,M,G} (1-2610, default 2610):+5G #+5G 表示第一个分区大小为5GB Command (m for help): n #输入n,新增加一个分区 Command action e extended p primary partition (1-4) p #输入p,为主分区 Partition number (1-4): 2 #输入2，表示第二个主分区 First cylinder (655-2610, default 655): 直接回车 Using default value 655 Last cylinder, +cylinders or +size{K,M,G} (655-2610, default 2610):+5G# +5G 表示第二个分区大小为5GB Command (m for help): n #输入n,新增加一个分区 Command action e extended p primary partition (1-4) p #输入p,为主分区 Partition number (1-4): 3 #输入3，表示第三个主分区 First cylinder (1309-2610, default 1309): 直接回车 Using default value 1309 Last cylinder, +cylinders or +size{K,M,G} (1309-2610, default 2610):+5G #+5G 表示第二个分区大小为5GB Command (m for help): n #输入n,新增加一个分区 Command action e extended p primary partition (1-4) p #输入p,为主分区 Selected partition 4 自动会默认为4 First cylinder (1963-2610, default 1963): 回车 Using default value 1963 Last cylinder, +cylinders or +size{K,M,G} (1963-2610, default 2610): #回车，把剩下空间全部发给第四个主分区 Using default value 2610 Command (m for help): p #输入p 打印所有已经分好的分区 Disk /dev/sdb: 21.5 GB, 21474836480 bytes 255 heads, 63 sectors/track, 2610 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0xf6c94b22 Device Boot Start End Blocks Id System /dev/sdb1 1 654 5253223+ 83 Linux /dev/sdb2 655 1308 5253255 83 Linux /dev/sdb3 1309 1962 5253255 83 Linux /dev/sdb4 1963 2610 5205060 83 Linux Command (m for help): w 最后一步，输入W 保存所有分区 The partition table has been altered! Calling ioctl() to re-read partition table. Syncing disks. 现在为止磁盘sdb已经分好了四个主分区，接下来要把分区全部格式化后，挂载到相应目录，让磁盘开机自动挂载。挂载好磁盘才可以进行读写操作 将sdb1，sdb2，sdb3，sdb4格式化成ext3文件系统 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdb1 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdb2 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdb3 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdb4 然后将sdb1挂载在/home目录下，sdb2,sdb3,sdb4,分别挂载到/home/disk0, /home/disk1, /home/disk2下 [root@ip-lab_client ~]# mkdir bak [root@ip-lab_client ~]# cd bak [root@ip-lab_client home]# mkdir disk0 [root@ip-lab_client home]# mkdir disk1 [root@ip-lab_client home]# mkdir disk2 编辑配置文件 /etc/fstab [root@ip-lab_client home]# vi /etc/fstab # # /etc/fstab # Created by anaconda on Wed Mar 15 20:06:16 2017 # # Accessible filesystems, by reference, are maintained under &apos;/dev/disk&apos; # See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info # UUID=d142517f-ad58-4f98-9cd8-558f6cf6c0be / ext4 defaults 1 1 UUID=4ff6775f-7726-4104-9ad2-6ec78925ee45 /boot ext4 defaults 1 2 UUID=46489792-1d2c-4c3c-965c-ababd0a57d87 swap swap defaults 0 0 tmpfs /dev/shm tmpfs defaults 0 0 devpts /dev/pts devpts gid=5,mode=620 0 0 sysfs /sys sysfs defaults 0 0 proc /proc proc defaults 0 0 /dev/sdb1 /home ext3 defaults 0 0 /dev/sdb2 /home/disk0 ext3 defaults 0 0 /dev/sdb3 /home/disk1 ext3 defaults 0 0 /dev/sdb4 /home/disk2 ext3 defaults 0 0 保存配置退出后，挂载一下全部分区 [root@ip-lab_client ~]# mount -a 查看挂载 [root@ip-lab_client ~]# mount /dev/sda3 on / type ext4 (rw) proc on /proc type proc (rw) sysfs on /sys type sysfs (rw) devpts on /dev/pts type devpts (rw,gid=5,mode=620) tmpfs on /dev/shm type tmpfs (rw) /dev/sda1 on /boot type ext4 (rw) none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw) /dev/sdb1 on /home type ext3 (rw) /dev/sdb2 on /home/disk0 type ext3 (rw) /dev/sdb3 on /home/disk1 type ext3 (rw) /dev/sdb4 on /home/disk2 type ext3 (rw) OR [root@ip-lab_client ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 1024M 0 rom sda 8:0 0 20G 0 disk ├─sda1 8:1 0 200M 0 part /boot ├─sda2 8:2 0 3G 0 part [SWAP] └─sda3 8:3 0 16.8G 0 part / sdb 8:16 0 20G 0 disk ├─sdb1 8:17 0 5G 0 part /home ├─sdb2 8:18 0 5G 0 part /home/disk0 ├─sdb3 8:19 0 5G 0 part /home/disk1 └─sdb4 8:20 0 5G 0 part /home/disk2 挂载有两种方式，一种使用分区对应的UUID 或者块设备如 /sdb1 查看分区对应UUID [root@ip-lab_client ~]# blkid /dev/sda1: UUID=&quot;4ff6775f-7726-4104-9ad2-6ec78925ee45&quot; TYPE=&quot;ext4&quot; /dev/sda2: UUID=&quot;46489792-1d2c-4c3c-965c-ababd0a57d87&quot; TYPE=&quot;swap&quot; /dev/sda3: UUID=&quot;d142517f-ad58-4f98-9cd8-558f6cf6c0be&quot; TYPE=&quot;ext4&quot; /dev/sdb1: UUID=&quot;2a297f59-8bd9-48b5-99c9-1a420e271ada&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdb2: UUID=&quot;a5517b1c-9c89-40cf-aca8-b748e866dd8a&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdb3: UUID=&quot;a77f5d27-8313-442d-9367-2b225f4cdcbf&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdb4: UUID=&quot;36bf0458-c221-4bc3-a060-8912a97be07b&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; 分区完成就可以对磁盘进行读写操作了~。 在对sdc磁盘进行分区这一次（3p+1e）,然后采用UUid方式挂载。 [root@ip-lab_client ~]# fdisk /dev/sdc Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel Building a new DOS disklabel with disk identifier 0x5cf6f80f. Changes will remain in memory only, until you decide to write them. After that, of course, the previous content won&apos;t be recoverable. Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite) WARNING: DOS-compatible mode is deprecated. It&apos;s strongly recommended to switch off the mode (command &apos;c&apos;) and change display units to sectors (command &apos;u&apos;). Command (m for help): n Command action e extended p primary partition (1-4) p Partition number (1-4): 1 First cylinder (1-2610, default 1): Using default value 1 Last cylinder, +cylinders or +size{K,M,G} (1-2610, default 2610): +5G Command (m for help): n Command action e extended p primary partition (1-4) P Partition number (1-4): 2 First cylinder (655-2610, default 655): Using default value 655 Last cylinder, +cylinders or +size{K,M,G} (655-2610, default 2610): +5G Command (m for help): n Command action e extended p primary partition (1-4) P Partition number (1-4): 3 First cylinder (1309-2610, default 1309): Using default value 1309 Last cylinder, +cylinders or +size{K,M,G} (1309-2610, default 2610): +5G Command (m for help):n Command action e extended p primary partition (1-4) e e为扩展分区，第四个为扩展分区 Selected partition 4 First cylinder (1963-2610, default 1963): 回车 Using default value 1963 Last cylinder, +cylinders or +size{K,M,G} (1963-2610, default 2610): 回车，剩下都为扩展分区 Using default value 2610 Command (m for help): n #在扩展分区中在分逻辑分区 First cylinder (1963-2610, default 1963): Using default value 1963 Last cylinder, +cylinders or +size{K,M,G} (1963-2610, default 2610): Using default value 2610 Command (m for help): p 打印分区表 Disk /dev/sdc: 21.5 GB, 21474836480 bytes 255 heads, 63 sectors/track, 2610 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x5cf6f80f Device Boot Start End Blocks Id System /dev/sdc1 1 654 5253223+ 83 Linux /dev/sdc2 655 1308 5253255 83 Linux /dev/sdc3 1309 1962 5253255 83 Linux /dev/sdc4 1963 2610 5205060 5 Extended /dev/sdc5 1963 2610 5205028+ 83 Linux Command (m for help): w #保存分区 将分区格式 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdc1 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdc2 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdc3 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdc5 查看uuid [root@ip-lab_client ~]# blkid /dev/sda1: UUID=&quot;4ff6775f-7726-4104-9ad2-6ec78925ee45&quot; TYPE=&quot;ext4&quot; /dev/sda2: UUID=&quot;46489792-1d2c-4c3c-965c-ababd0a57d87&quot; TYPE=&quot;swap&quot; /dev/sda3: UUID=&quot;d142517f-ad58-4f98-9cd8-558f6cf6c0be&quot; TYPE=&quot;ext4&quot; /dev/sdb1: UUID=&quot;2a297f59-8bd9-48b5-99c9-1a420e271ada&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdb2: UUID=&quot;a5517b1c-9c89-40cf-aca8-b748e866dd8a&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdb3: UUID=&quot;a77f5d27-8313-442d-9367-2b225f4cdcbf&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdb4: UUID=&quot;36bf0458-c221-4bc3-a060-8912a97be07b&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdc1: UUID=&quot;98a45b99-f7b4-4c1d-9263-5099058b49cd&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdc2: UUID=&quot;1707af59-7e03-48f7-a884-fd88294f821c&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdc3: UUID=&quot;a16d8850-ea9d-4ec4-89ec-13001e9f3b3c&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdc5: UUID=&quot;0be10fe0-525f-4f14-ada5-7f1dcc3bf5b0&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; 创建目录 [root@ip-lab_client ~]# cd /home [root@ip-lab_client home]# mkdir disk3 [root@ip-lab_client home]# mkdir disk4 [root@ip-lab_client home]# mkdir disk5 [root@ip-lab_client home]# mkdir disk6 编辑/etc/fstab把分区挂载到/home/disk3, /home/disk4 , /home/disk5 , /home/disk6, 采用uuid的方式 [root@ip-lab_client ~]# vi /etc/fstab # # Accessible filesystems, by reference, are maintained under &apos;/dev/disk&apos; # See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info # UUID=d142517f-ad58-4f98-9cd8-558f6cf6c0be / ext4 defaults 1 1 UUID=4ff6775f-7726-4104-9ad2-6ec78925ee45 /boot ext4 defaults 1 2 UUID=46489792-1d2c-4c3c-965c-ababd0a57d87 swap swap defaults 0 0 tmpfs /dev/shm tmpfs defaults 0 0 devpts /dev/pts devpts gid=5,mode=620 0 0 sysfs /sys sysfs defaults 0 0 proc /proc proc defaults 0 0 /dev/sdb1 /home ext3 defaults 0 0 /dev/sdb2 /home/disk0 ext3 defaults 0 0 /dev/sdb3 /home/disk1 ext3 defaults 0 0 /dev/sdb4 /home/disk2 ext3 defaults 0 0 UUID=98a45b99-f7b4-4c1d-9263-5099058b49cd /home/disk3 ext3 defaults 0 0 UUID=1707af59-7e03-48f7-a884-fd88294f821c /home/disk4 ext3 defaults 0 0 UUID=a16d8850-ea9d-4ec4-89ec-13001e9f3b3c /home/disk5 ext3 defaults 0 0 UUID=0be10fe0-525f-4f14-ada5-7f1dcc3bf5b0 /home/disk6 ext3 defaults 0 0 保存配置退出 重新挂载一下全部分区 [root@ip-lab_client home]# mount -a 查看挂载 [root@ip-lab_client home]# mount /dev/sda3 on / type ext4 (rw) proc on /proc type proc (rw) sysfs on /sys type sysfs (rw) devpts on /dev/pts type devpts (rw,gid=5,mode=620) tmpfs on /dev/shm type tmpfs (rw) /dev/sda1 on /boot type ext4 (rw) none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw) /dev/sdb1 on /home type ext3 (rw) /dev/sdb2 on /home/disk0 type ext3 (rw) /dev/sdb3 on /home/disk1 type ext3 (rw) /dev/sdb4 on /home/disk2 type ext3 (rw) /dev/sdc1 on /home/disk3 type ext3 (rw) /dev/sdc2 on /home/disk4 type ext3 (rw) /dev/sdc3 on /home/disk5 type ext3 (rw) /dev/sdc5 on /home/disk6 type ext3 (rw) [root@ip-lab_client home]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 1024M 0 rom sda 8:0 0 20G 0 disk ├─sda1 8:1 0 200M 0 part /boot ├─sda2 8:2 0 3G 0 part [SWAP] └─sda3 8:3 0 16.8G 0 part / sdb 8:16 0 20G 0 disk ├─sdb1 8:17 0 5G 0 part /home ├─sdb2 8:18 0 5G 0 part /home/disk0 ├─sdb3 8:19 0 5G 0 part /home/disk1 └─sdb4 8:20 0 5G 0 part /home/disk2 sdd 8:48 0 20G 0 disk sdc 8:32 0 20G 0 disk ├─sdc1 8:33 0 5G 0 part /home/disk3 ├─sdc2 8:34 0 5G 0 part /home/disk4 ├─sdc3 8:35 0 5G 0 part /home/disk5 ├─sdc4 8:36 0 1K 0 part └─sdc5 8:37 0 5G 0 part /home/disk6 sdf 8:80 0 4.9T 0 disk sde 8:64 0 20G 0 disk 分区挂载已经全部完成 三、parted分区工具接下来对sdf（5T）硬盘进行分区 [root@ip-lab_client ~]# parted /dev/sdf GNU Parted 2.1 使用 /dev/sdf Welcome to GNU Parted! Type &apos;help&apos; to view a list of commands. (parted) help #输入help可以查看分区的命令 align-check TYPE N check partition N for TYPE(min|opt) alignment check NUMBER do a simple check on the file system cp [FROM-DEVICE] FROM-NUMBER TO-NUMBER copy file system to another partition help [COMMAND] print general help, or help on COMMAND mklabel,mktable LABEL-TYPE create a new disklabel (partition table) mkfs NUMBER FS-TYPE make a FS-TYPE file system on partition NUMBER mkpart PART-TYPE [FS-TYPE] START END make a partition mkpartfs PART-TYPE FS-TYPE START END make a partition with a file system move NUMBER START END move partition NUMBER name NUMBER NAME name partition NUMBER as NAME print [devices|free|list,all|NUMBER] display the partition table, available devices, free space, all found partitions, or a particular partition quit exit program rescue START END rescue a lost partition near START and END resize NUMBER START END resize partition NUMBER and its file system rm NUMBER delete partition NUMBER select DEVICE choose the device to edit set NUMBER FLAG STATE change the FLAG on partition NUMBER toggle [NUMBER [FLAG]] toggle the state of FLAG on partition NUMBER unit UNIT set the default unit to UNIT version display the version number and copyright information of GNU Parted (parted) mklabel #mklable 新建一个分区表 新的磁盘标签类型？ GPT #分区表的类型为GPT (parted) mkpart #mkpart，新建一个分区 分区名称？ []? 1 #给分区命名 文件系统类型？ [ext2]? ext3 #现在文件系统类型 ，这个可以在后续格式化选择想要的 起始点？ 1 #从第一个扇区开始分 结束点？ 500G #设置500G大小 (parted) mkpart #mklable 新建一个分区表 分区名称？ []? 2 #给分区命名 文件系统类型？ [ext2]? ext3 #现在文件系统类型 ，这个可以在后续格式化选择想要的 起始点？ 500G #从上一次分区结束开始 结束点？ 1000G #设置500G大小 (parted) mkpart 分区名称？ []? 3 文件系统类型？ [ext2]? ext3 起始点？ 1000G 结束点？ 1500G (parted) mkpart 分区名称？ []? 4 文件系统类型？ [ext2]? ext3 起始点？ 1500G 结束点？ 2000G (parted) mkpart 分区名称？ []? 5 文件系统类型？ [ext2]? ext3 起始点？ 2000G 结束点？ 3000G (parted) mkpart 分区名称？ []? 6 文件系统类型？ [ext2]? ext3 起始点？ 3000G 结束点？ 5000G (parted) P Model: VMware, VMware Virtual S (scsi) Disk /dev/sdf: 5369GB Sector size (logical/physical): 512B/512B Partition Table: gpt Number Start End Size File system Name 标志 1 1049kB 500GB 500GB 1 2 500GB 1000GB 500GB 2 3 1000GB 1500GB 500GB 3 4 1500GB 2000GB 500GB 4 5 2000GB 3000GB 1000GB 5 6 3000GB 5000GB 2000GB 6 (parted) q #退出 信息: You may need to update /etc/fstab. 将分区格式化： [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdf1 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdf2 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdf3 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdf4 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdf5 [root@ip-lab_client ~]# mkfs -t ext3 -c /dev/sdf6 先创建对应的目录 [root@ip-lab_client ~]# mkdir /bak [root@ip-lab_client ~]# cd /bak [root@ip-lab_client bak]# mkdir disk{0,1,2,3,4} 编辑/ect/fstab文件，把分区分别挂载到/bak ，/bak/disk0 ， /bak/disk1 ，/bak/disk2 ，/bak/disk3 ， /bak/disk4 [root@ip-lab_client bak]# vi /etc/fstab # # /etc/fstab # Created by anaconda on Wed Mar 15 20:06:16 2017 UUID=4ff6775f-7726-4104-9ad2-6ec78925ee45 /boot ext4 defaults 1 2 UUID=46489792-1d2c-4c3c-965c-ababd0a57d87 swap swap defaults 0 0 tmpfs /dev/shm tmpfs defaults 0 0 devpts /dev/pts devpts gid=5,mode=620 0 0 sysfs /sys sysfs defaults 0 0 proc /proc proc defaults 0 0 /dev/sdb1 /home ext3 defaults 0 0 /dev/sdb2 /home/disk0 ext3 defaults 0 0 /dev/sdb3 /home/disk1 ext3 defaults 0 0 /dev/sdb4 /home/disk2 ext3 defaults 0 0 UUID=98a45b99-f7b4-4c1d-9263-5099058b49cd /home/disk3 ext3 defaults 0 0 UUID=1707af59-7e03-48f7-a884-fd88294f821c /home/disk4 ext3 defaults 0 0 UUID=a16d8850-ea9d-4ec4-89ec-13001e9f3b3c /home/disk5 ext3 defaults 0 0 UUID=0be10fe0-525f-4f14-ada5-7f1dcc3bf5b0 /home/disk6 ext3 defaults 0 0 /dev/sdf1 /bak ext3 defaults 0 0 /dev/sdf2 /bak/disk0 ext3 defaults 0 0 /dev/sdf3 /bak/disk1 ext3 defaults 0 0 /dev/sdf4 /bak/disk2 ext3 defaults 0 0 /dev/sdf5 /bak/disk3 ext3 defaults 0 0 /dev/sdf6 /bak/disk4 ext3 defaults 0 0 保存退出后重新挂载： [root@ip-lab_client ~]# mount -a [root@ip-lab_client ~]# mount /dev/sda3 on / type ext4 (rw) proc on /proc type proc (rw) sysfs on /sys type sysfs (rw) devpts on /dev/pts type devpts (rw,gid=5,mode=620) tmpfs on /dev/shm type tmpfs (rw) /dev/sda1 on /boot type ext4 (rw) none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw) /dev/sdb1 on /home type ext3 (rw) /dev/sdb2 on /home/disk0 type ext3 (rw) /dev/sdb3 on /home/disk1 type ext3 (rw) /dev/sdb4 on /home/disk2 type ext3 (rw) /dev/sdc1 on /home/disk3 type ext3 (rw) /dev/sdc2 on /home/disk4 type ext3 (rw) /dev/sdc3 on /home/disk5 type ext3 (rw) /dev/sdc5 on /home/disk6 type ext3 (rw) /dev/sdf1 on /bak type ext3 (rw) /dev/sdf2 on /bak/disk0 type ext3 (rw) /dev/sdf3 on /bak/disk1 type ext3 (rw) /dev/sdf4 on /bak/disk2 type ext3 (rw) /dev/sdf5 on /bak/disk3 type ext3 (rw) /dev/sdf6 on /bak/disk4 type ext3 (rw 分区完成可以进行读写操作~~~ [root@ip-lab_client ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 1024M 0 rom sda 8:0 0 20G 0 disk ├─sda1 8:1 0 200M 0 part /boot ├─sda2 8:2 0 3G 0 part [SWAP] └─sda3 8:3 0 16.8G 0 part / sdb 8:16 0 20G 0 disk ├─sdb1 8:17 0 5G 0 part /home ├─sdb2 8:18 0 5G 0 part /home/disk0 ├─sdb3 8:19 0 5G 0 part /home/disk1 └─sdb4 8:20 0 5G 0 part /home/disk2 sdd 8:48 0 20G 0 disk sdc 8:32 0 20G 0 disk ├─sdc1 8:33 0 5G 0 part /home/disk3 ├─sdc2 8:34 0 5G 0 part /home/disk4 ├─sdc3 8:35 0 5G 0 part /home/disk5 ├─sdc4 8:36 0 1K 0 part └─sdc5 8:37 0 5G 0 part /home/disk6 sdf 8:80 0 4.9T 0 disk ├─sdf1 8:81 0 465.7G 0 part /bak ├─sdf2 8:82 0 465.7G 0 part /bak/disk0 ├─sdf3 8:83 0 465.7G 0 part /bak/disk1 ├─sdf4 8:84 0 465.7G 0 part /bak/disk2 ├─sdf5 8:85 0 931.3G 0 part /bak/disk3 └─sdf6 8:86 0 1.8T 0 part /bak/disk4 sde 8:64 0 20G 0 disk 查看一下分区UUID [root@ip-lab_client ~]# blkid /dev/sda1: UUID=&quot;4ff6775f-7726-4104-9ad2-6ec78925ee45&quot; TYPE=&quot;ext4&quot; /dev/sda2: UUID=&quot;46489792-1d2c-4c3c-965c-ababd0a57d87&quot; TYPE=&quot;swap&quot; /dev/sda3: UUID=&quot;d142517f-ad58-4f98-9cd8-558f6cf6c0be&quot; TYPE=&quot;ext4&quot; /dev/sdb1: UUID=&quot;2a297f59-8bd9-48b5-99c9-1a420e271ada&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdb2: UUID=&quot;a5517b1c-9c89-40cf-aca8-b748e866dd8a&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdb3: UUID=&quot;a77f5d27-8313-442d-9367-2b225f4cdcbf&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdb4: UUID=&quot;36bf0458-c221-4bc3-a060-8912a97be07b&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdc1: UUID=&quot;98a45b99-f7b4-4c1d-9263-5099058b49cd&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdc2: UUID=&quot;1707af59-7e03-48f7-a884-fd88294f821c&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdc3: UUID=&quot;a16d8850-ea9d-4ec4-89ec-13001e9f3b3c&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdc5: UUID=&quot;0be10fe0-525f-4f14-ada5-7f1dcc3bf5b0&quot; SEC_TYPE=&quot;ext2&quot; TYPE=&quot;ext3&quot; /dev/sdf1: UUID=&quot;a0c22db6-442b-4283-afc8-75de6102132c&quot; TYPE=&quot;ext3&quot; /dev/sdf2: UUID=&quot;d9216bae-fb4b-4f63-aecf-1f76e34d6429&quot; TYPE=&quot;ext3&quot; /dev/sdf3: UUID=&quot;894375c9-7c80-4c23-a869-ae2ae16807a6&quot; TYPE=&quot;ext3&quot; /dev/sdf4: UUID=&quot;93f2663a-ac59-4467-82cd-119d486dcac6&quot; TYPE=&quot;ext3&quot; /dev/sdf5: UUID=&quot;8d628d3e-6264-4880-9e30-e742bf345f00&quot; TYPE=&quot;ext3&quot; /dev/sdf6: UUID=&quot;ab1a2ba8-9df7-4e93-b5fa-37ba72433e72&quot; TYPE=&quot;ext3&quot; (~^ v ^~)]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>fdisk</tag>
        <tag>parted</tag>
      </tags>
  </entry>
</search>